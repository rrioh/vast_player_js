(()=>{"use strict";function e(e,t,r){if(!t)return;new Date;let n=document.createElement("img");t=r(t,null),n.src=t,n.style.display="none",e.prepend(n),console.log("[DEBUG] beacon sent: "+t)}function t(t,r,n){if(t)for(let o of t)o=o.replace(/\[ERRORCODE\]/,r.toString()),e(document.body,o,n)}function r(e){let t=e.match(/(\d{2}):(\d{2}):(\d{2})\.?(\d{3})?/);if(!t||t.length<4||NaN===parseInt(t[1])||NaN===parseInt(t[2])||NaN===parseInt(t[3]))throw new Error("convertdurationToSecond error: "+e);return 5==t.length&&NaN!=parseInt(t[4])?60*parseInt(t[1])*60+60*parseInt(t[2])+parseFloat(t[3]+"."+t[4]):60*parseInt(t[1])*60+60*parseInt(t[2])+parseFloat(t[3])}function n(e){let t=[];for(let n of e){let e=n,o=parseInt(e.getAttribute("width")||"10")||10,i=parseInt(e.getAttribute("height")||"10")||10,a="0px",s=e.getAttribute("xPosition");s&&(a="left"===s||"right"===s?s:s+"px");let c="0px",l=e.getAttribute("yPosition");l&&(c="top"===l||"bottom"===l?l:l+"px");let p=e.getAttribute("offset"),d=0;p&&(d=r(p));let u=e.getAttribute("duration"),f=null;u&&(f=r(u)+d);const h=e.querySelector(":scope>StaticResource");if(!h||!h.textContent)continue;const E=e.querySelector(":scope>IconClicks>IconClickThrough"),m=e.querySelector(":scope>IconClicks>IconClickTracking");t.push({width:o,height:i,xPosition:a,yPosition:c,start:d,end:f,imgUrl:h.textContent,clickThroughUrl:E?.textContent??null,clickTrackingUrl:m?.textContent??null})}return t}var o;!function(e){e[e.XMLParseError=100]="XMLParseError",e[e.VASTSchemaValidationError=101]="VASTSchemaValidationError",e[e.VASTVersionOfResponseNotSupported=102]="VASTVersionOfResponseNotSupported",e[e.NonPlayableAdType=200]="NonPlayableAdType",e[e.MediaPlayerExpectingDifferentLinearity=201]="MediaPlayerExpectingDifferentLinearity",e[e.MediaPlayerExpectingDifferentDuration=202]="MediaPlayerExpectingDifferentDuration",e[e.MediaPlayerExpectingDifferentSize=203]="MediaPlayerExpectingDifferentSize",e[e.AdCategoryNotProvided=204]="AdCategoryNotProvided",e[e.InlineCategoryViolatesWrapperBlockedAdCategories=205]="InlineCategoryViolatesWrapperBlockedAdCategories",e[e.AdNotServed=206]="AdNotServed",e[e.GeneralWrapperError=300]="GeneralWrapperError",e[e.VASTURIUnavailableOrTimeout=301]="VASTURIUnavailableOrTimeout",e[e.WrapperLimitReached=302]="WrapperLimitReached",e[e.NoVASTResponseAfterWrapper=303]="NoVASTResponseAfterWrapper",e[e.AdUnitNotDisplayed=304]="AdUnitNotDisplayed",e[e.GeneralLinearError=400]="GeneralLinearError",e[e.FileNotFound=401]="FileNotFound",e[e.MediaFileURITimeout=402]="MediaFileURITimeout",e[e.SupportedMediaFileNotFound=403]="SupportedMediaFileNotFound",e[e.ProblemDisplayingMediaFile=405]="ProblemDisplayingMediaFile",e[e.MezzanineNotProvided=406]="MezzanineNotProvided",e[e.MezzanineDownloading=407]="MezzanineDownloading",e[e.ConditionalAdRejected=408]="ConditionalAdRejected",e[e.InteractiveUnitNotExecuted=409]="InteractiveUnitNotExecuted",e[e.VerificationUnitNotExecuted=410]="VerificationUnitNotExecuted",e[e.NotRequiredSpecificationOfMezzanine=411]="NotRequiredSpecificationOfMezzanine",e[e.GeneralNonLinearAdsError=500]="GeneralNonLinearAdsError",e[e.NonLinearAdNonDisplayable=501]="NonLinearAdNonDisplayable",e[e.UnableToFetchNonLinearResource=502]="UnableToFetchNonLinearResource",e[e.SupportedNonLinearResourceNotFound=503]="SupportedNonLinearResourceNotFound",e[e.GeneralCompanionAdsError=600]="GeneralCompanionAdsError",e[e.CompanionNonDisplayableByDimemsionError=601]="CompanionNonDisplayableByDimemsionError",e[e.RequiredCompanionNonDisplayable=602]="RequiredCompanionNonDisplayable",e[e.UnableToFetchNonCompanionResource=603]="UnableToFetchNonCompanionResource",e[e.SupportedCompanionResourceNotFound=604]="SupportedCompanionResourceNotFound",e[e.UndefinedError=900]="UndefinedError",e[e.GeneralVPAIDError=901]="GeneralVPAIDError",e[e.GeneralInteractiveCreativeFileError=902]="GeneralInteractiveCreativeFileError"}(o||(o={}));const i=new Map([["start",0],["firstQuartile",1/4],["midpoint",.5],["thirdQuartile",3/4],["complete",1]]),a=new class{constructor(){}isWrapper(e){return!!e.querySelector(":scope>Ad>Wrapper")}async nextVast(e){const t=e.querySelector(":scope>Ad>Wrapper>VASTAdTagURI");if(!t||!t.textContent)throw new Error("next vast url error");let r=t.textContent;const n=await fetch(r);return await n.text()}async parseVast(e,t){try{let r={errorUrls:[],impressionUrls:[],adTitle:"",adDesc:"",creatives:[]};for(let n=1;n<=5;n++){let o=this.parseVastXML(e);if(!this.isWrapper(o)){r=this.updateInlineVastObject(r,o,t);break}if(5==n)throw new Error("too many wrapper");r=this.updateWrapperVastObject(r,o,t),e=await this.nextVast(o)}return r}catch(e){return console.log("[ERROR] cannot create VASTObject: "+e),null}}parseVastXML(e){let t=(new DOMParser).parseFromString(e,"application/xml"),r=t.querySelector("parsererror");if(r)throw new Error(r.textContent||"parse vast error");let n=t.querySelector("VAST");if(!n)throw new Error("VAST tag not found");return n}updateWrapperVastObject(e,i,a){let s=[];const c=i.querySelector(":scope>Error");c&&c.textContent&&s.push(c.textContent);const l=i.querySelector(":scope>Ad>Wrapper");if(!l)throw t(s,o.NoVASTResponseAfterWrapper,a),new Error("parse Wrapper error");const p=l.querySelector(":scope>Error");p&&p.textContent&&s.push(p.textContent);const d=l.querySelector(":scope>Impression");if(!d||!d.textContent)throw t(s,o.XMLParseError,a),new Error("parse Wrapper Impression error");const u=d.textContent,f=l.querySelector(":scope>Creatives>Creative>Linear");if(!f)return e.errorUrls=e.errorUrls.concat(s),e.impressionUrls.push(u),e;const h=f.querySelector(":scope>Duration");if(!h||!h.textContent)throw t(s,o.XMLParseError,a),new Error("parse Wrapper Linear Duration error");const E=r(h.textContent),m=f.querySelectorAll(":scope>TrackingEvents>Tracking"),g=this.createTrackingObject(m,E),y=n(f.querySelectorAll(":scope>Icons>Icon")),T=f.querySelector(":scope>VideoClicks");let v=null,A=[];if(T){const e=T.querySelector(":scope>ClickThrough");e&&e.textContent&&(v={content:e.textContent});const t=T.querySelectorAll(":scope>ClickTracking");for(let e of t)e.textContent&&A.push({content:e.textContent})}return e.errorUrls=e.errorUrls.concat(s),e.impressionUrls.push(u),e.creatives.push({linear:{duration:E,mediaFiles:[],trackingEvents:g,clickThrough:v,clickTrackings:A,icons:y}}),e}updateInlineVastObject(e,i,a){let s=[];const c=i.querySelector(":scope>Error");c&&c.textContent&&s.push(c.textContent);const l=i.querySelector(":scope>Ad>InLine");if(!l)throw t(s,o.NoVASTResponseAfterWrapper,a),new Error("parse InLine error");const p=l.querySelector(":scope>Error");p&&p.textContent&&s.push(p.textContent);const d=l.querySelector(":scope>Impression");if(!d||!d.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine Impression error");const u=d.textContent,f=l.querySelector(":scope>AdTitle");if(!f||!f.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine AdTitle error");const h=f.textContent;let E=null;const m=l.querySelector(":scope>Description");m&&m.textContent&&(E=m.textContent);const g=l.querySelector(":scope>Creatives>Creative>Linear");if(!g)throw t(s,o.XMLParseError,a),new Error("parse InLine Linear error");const y=g.querySelector(":scope>Duration");if(!y||!y.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine Linear Duration error");const T=r(y.textContent),v=g.querySelectorAll(":scope>TrackingEvents>Tracking"),A=this.createTrackingObject(v,T),C=n(g.querySelectorAll(":scope>Icons>Icon")),x=g.querySelectorAll(":scope>MediaFiles>MediaFile");if(!x)throw t(s,o.XMLParseError,a),new Error("parse MediaFiles error");const I=x[0]?.textContent,S=g.querySelector(":scope>VideoClicks");let w=null,k=[];if(S){const e=S.querySelector(":scope>ClickThrough");if(!e||!e.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine Linear ClickThrough error");w={content:e.textContent};const r=S.querySelectorAll(":scope>ClickTracking");for(let e of r)e.textContent&&k.push({content:e.textContent})}return e.errorUrls=e.errorUrls.concat(s),e.impressionUrls.push(u),e.adTitle=h,e.adDesc=E,e.creatives.push({linear:{duration:T,mediaFiles:[{content:I}],trackingEvents:A,clickThrough:w,clickTrackings:k,icons:C}}),e}createTrackingObject(e,t){const n=new Map;return e.forEach((function(e){if(!e.textContent)return;const o=e.getAttribute("event");if(o)if("progress"===o){const t=e.getAttribute("offset");if(!t)return;const o=r(t);n.set(o,e.textContent)}else{const r=i.get(o);null!=r?(console.log("================ DURATIOIN ========:"),console.log(t),n.set(r*t,e.textContent)):n.set(o,e.textContent)}})),n}},s=new class{async startPlayer(t){console.log("setPlayer started...");try{let n=document.createElement("iframe");n.width="300px",n.height="250px",n.style.border="none",document.getElementById("playerbox")?.appendChild(n);let o=n.contentWindow.document;o.open(),o.write('\n<!DOCTYPE html>\n<html>\n    <head>\n    </head>\n    <body style="margin:0;">\n        <div id="vast_video_container">\n            <div id="vast_video" style="width:300px;height:168.75px;"></div>\n            <div id="progress_bar" style="width:50%;height:3px;background-color:gray;"></div>\n            <div id="ad_text" style="margin:0;width:300px;height:78.25px;background-color:#dcdcdc;">\n                <div id="ad_title" style="font-size:15px;font-weight:bold;"></div>\n                <div id="ad_desc" style="font-size:10px;"></div>\n            </div>\n        </div>\n    </body>\n</html>\n'),o.close(),o.documentElement.style.overflow="hidden";let i=o.getElementById("vast_video");const s=function(e){let t=new Map;t.set("[TIMESTAMP]",(()=>(new Date).toISOString()));const r={ratio:0};return new IntersectionObserver((function(e){e.forEach((function(e){const t=Math.floor(100*e.intersectionRatio)/100;r.ratio=t}))}),{rootMargin:"0px",threshold:[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]}).observe(e),t.set("[INVIEW_RATIO]",function(e){return()=>e.ratio.toFixed(2)}(r)),(e,r)=>(r&&t.set("[ERRORCODE]",r.toString()),t.forEach(((t,r)=>{e=e.replace(r,"function"==typeof t?t():t)})),e)}(i),c=await a.parseVast('\n<VAST version="4.2">\n  <Error>\n    <![CDATA[http://test.example/error?code=[ERRORCODE]&clientTime=[TIMESTAMP]]]>\n  </Error>\n  <Ad id="1b330e59-3a62-4000-b9fb-ac9726e98c52" sequence="1">\n    <Wrapper>\n      <Impression><![CDATA[https://wrapper.test.example/impression?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Impression>\n      <VASTAdTagURI>\n        <![CDATA[http://localhost:8080/sample/inline.html]]>\n      </VASTAdTagURI>\n      <Creatives>\n        <Creative adId="7245" sequence="1">\n          <Linear>\n            <Duration>00:00:14.014</Duration>\n            <TrackingEvents>\n              <Tracking event="start"><![CDATA[https://wrapper.test.example/start?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Tracking>\n              <Tracking event="firstQuartile"><![CDATA[https://wrapper.test.example/firstQuartile?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Tracking>\n              <Tracking event="complete"><![CDATA[https://wrapper.test.example/complete?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Tracking>\n            </TrackingEvents>\n          </Linear>\n        </Creative>\n      </Creatives>\n    </Wrapper>\n  </Ad>\n</VAST>\n',s);if(!c)return;o.getElementById("ad_title").textContent=c.adTitle;let l=o.getElementById("ad_desc");c.adDesc&&(l.textContent=c.adDesc);let p=document.createElement("video");i.appendChild(p);for(let u of c.creatives)for(let f of u.linear.mediaFiles){let h=document.createElement("source");h.src=f.content;let E=(r=f.content,/\.mp4$/.test(r)?"video/mp4":/\.mov$/.test(r)?"video/quicktime":/\.mpg$/.test(r)||/\.mpeg$/.test(r)?"video/mpeg":/\.webm$/.test(r)?"video/webm":"");E&&(h.type=E),p.appendChild(h)}function d(e){e.forEach((function(e){e.isIntersecting?p.play():(console.log("~~~~THIS IS PAUSE EVENT!!!!!!!!!!!!!!!!!!!!!!!!!!"),p.pause())}))}p.style.width="100%",p.style.height="100%",p.muted=!0,p.autoplay=!0,p.addEventListener("loadedmetadata",(function(e){console.log("======= DURATION OF VIDEO TAG =========:"),console.log(p.duration);let t=o.getElementById("progress_bar"),r=function(){let e=p.currentTime/p.duration*100;t.style.width=e+"%",requestAnimationFrame(r)};requestAnimationFrame(r)})),function(t,r,n){!function(t,r,n){for(let o of r)t.addEventListener("canplay",(function(r){e(t,o,n)}),{once:!0})}(t,r.impressionUrls,n),function(e,t){for(let r of t.creatives)if(r.linear.clickThrough){const t=r.linear.clickThrough.content;e.addEventListener("click",(function(e){open(t,"_blank")}))}}(t,r),function(t,r,n){for(let o of r.creatives)for(let r of o.linear.clickTrackings){const o=r.content;t.addEventListener("click",(function(r){e(t,o,n)}))}}(t,r,n),function(t,r,n){t.addEventListener("loadedmetadata",(function(o){for(let o of r.creatives)for(let[r,i]of o.linear.trackingEvents)"loaded"==r?t.addEventListener("canplay",(function(r){e(t,i,n)}),{once:!0}):"pause"===r?t.addEventListener("pause",(function(r){e(t,i,n)})):"number"==typeof r&&t.addEventListener("timeupdate",(function o(a){t.currentTime>=r&&(e(t,i,n),t.removeEventListener("timeupdate",o))}))}))}(t,r,n)}(p,c,s),function(t,r,n,o){for(let i of n.creatives)for(let n of i.linear.icons){let i=document.createElement("img");i.src=n.imgUrl,i.width=n.width,i.height=n.height,i.style.position="fixed","left"===n.xPosition?i.style.left="0px":"right"===n.xPosition?i.style.right="0px":i.style.left=n.xPosition,"top"===n.yPosition?i.style.top="0px":"bottom"===n.yPosition?i.style.bottom="0px":i.style.top=n.yPosition,i.addEventListener("click",(function(r){n.clickTrackingUrl&&e(t,n.clickTrackingUrl,o),n.clickThroughUrl&&open(n.clickThroughUrl,"_blank")})),t.addEventListener("timeupdate",(function e(o){!r.contains(i)&&t.currentTime>=n.start&&r.appendChild(i),n.end&&r.contains(i)&&t.currentTime>=n.end&&(r.removeChild(i),t.removeEventListener("timeupdate",e))})),n.end||t.addEventListener("ended",(function(e){r.contains(i)&&r.removeChild(i)}))}}(p,i,c,s),p.addEventListener("pause",(()=>{console.log("================== VIDEO PAUSE =====================")})),new IntersectionObserver(d,{rootMargin:"0px",threshold:.5}).observe(p)}catch(m){console.log("cannot start Player: "+m)}var r}};window.vastExecutor=window.vastExecutor||s})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUU3QlIsRUFBSzJJLGlCQUFpQixTQUFTLFNBQVUzRixHQUNqQzBHLEVBQVFySSxrQkFDUnJELEVBQWE4SixFQUFPNEIsRUFBUXJJLGlCQUFrQmxELEdBRTlDdUwsRUFBUXRJLGlCQUNSZ0YsS0FBS3NELEVBQVF0SSxnQkFBaUIsYUFHdEMwRyxFQUFNYSxpQkFBaUIsY0FBYyxTQUFTcUIsRUFBY2hILElBQ25EeUcsRUFBV1EsU0FBU2pLLElBQVM4SCxFQUFNaUIsYUFBZVcsRUFBUWhKLE9BQzNEK0ksRUFBV3hELFlBQVlqRyxHQUV2QjBKLEVBQVE5SSxLQUFPNkksRUFBV1EsU0FBU2pLLElBQVM4SCxFQUFNaUIsYUFBZVcsRUFBUTlJLE1BQ3pFNkksRUFBV1MsWUFBWWxLLEdBQ3ZCOEgsRUFBTXlCLG9CQUFvQixhQUFjUyxPQUkzQ04sRUFBUTlJLEtBQ1RrSCxFQUFNYSxpQkFBaUIsU0FBUyxTQUFVM0YsR0FDbEN5RyxFQUFXUSxTQUFTakssSUFDcEJ5SixFQUFXUyxZQUFZbEssT0dDbkMsQ0FBYThILEVBQU9yQixFQUFjdEUsRUFBWWhFLEdBQzlDMkosRUFBTWEsaUJBQWlCLFNBQVMsS0FDNUIvSixRQUFRQyxJQUFJLDJEQW1CQyxJQUFJa0kscUJBQXFCc0IsRUFmMUIsQ0FDWmhCLFdBQVksTUFDWkMsVUFBVyxLQWNOQyxRQUFRTyxHQUVyQixNQUFPOUUsR0FDSHBFLFFBQVFDLElBQUksd0JBQTBCbUUsR0NoSTNDLElBQXNCOUUsSURxSTdCaU0sT0FBT3RFLGFBQWVzRSxPQUFPdEUsY0FBZ0JBLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92YXN0X3BsYXllcl9qcy8uL2xpYi9kb21haW4vc2VydmljZS9iZWFjb24udHMiLCJ3ZWJwYWNrOi8vdmFzdF9wbGF5ZXJfanMvLi9saWIvdXRpbC90aW1lLnRzIiwid2VicGFjazovL3Zhc3RfcGxheWVyX2pzLy4vbGliL2RvbWFpbi9zZXJ2aWNlL2ljb24udHMiLCJ3ZWJwYWNrOi8vdmFzdF9wbGF5ZXJfanMvLi9saWIvdXRpbC9tYWNyby50cyIsIndlYnBhY2s6Ly92YXN0X3BsYXllcl9qcy8uL2xpYi9kb21haW4vc2VydmljZS92YXN0LnRzIiwid2VicGFjazovL3Zhc3RfcGxheWVyX2pzLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vdmFzdF9wbGF5ZXJfanMvLi9saWIvdXRpbC92aWRlby50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzZXRJbXByZXNzaW9uVXJsKHZpZGVvLCB1cmxzLCBtYWNyb1JlcGxhY2VyKSB7XG4gICAgZm9yIChsZXQgdXJsIG9mIHVybHMpIHtcbiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcImNhbnBsYXlcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGNyZWF0ZUJlYWNvbih2aWRlbywgdXJsLCBtYWNyb1JlcGxhY2VyKTtcbiAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZpZGVvQ2xpY2tUaHJvdWdoVXJsKHZpZGVvLCB2YXN0T2JqZWN0KSB7XG4gICAgZm9yIChsZXQgY3JlYXRpdmUgb2YgdmFzdE9iamVjdC5jcmVhdGl2ZXMpIHtcbiAgICAgICAgaWYgKGNyZWF0aXZlLmxpbmVhci5jbGlja1Rocm91Z2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGNyZWF0aXZlLmxpbmVhci5jbGlja1Rocm91Z2guY29udGVudDtcbiAgICAgICAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIG9wZW4odXJsLCBcIl9ibGFua1wiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VmlkZW9DbGlja1RyYWNraW5nVXJscyh2aWRlbywgdmFzdE9iamVjdCwgbWFjcm9SZXBsYWNlcikge1xuICAgIGZvciAobGV0IGNyZWF0aXZlIG9mIHZhc3RPYmplY3QuY3JlYXRpdmVzKSB7XG4gICAgICAgIGZvciAobGV0IGNsaWNrVHJhY2tpbmcgb2YgY3JlYXRpdmUubGluZWFyLmNsaWNrVHJhY2tpbmdzKSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBjbGlja1RyYWNraW5nLmNvbnRlbnQ7XG4gICAgICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVCZWFjb24odmlkZW8sIHVybCwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFRyYWNraW5nVXJscyh2aWRlbywgdmFzdE9iamVjdCwgbWFjcm9SZXBsYWNlcikge1xuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRtZXRhZGF0YVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmb3IgKGxldCBjcmVhdGl2ZSBvZiB2YXN0T2JqZWN0LmNyZWF0aXZlcykge1xuICAgICAgICAgICAgZm9yIChsZXQgW3BvaW50LCB1cmxdIG9mIGNyZWF0aXZlLmxpbmVhci50cmFja2luZ0V2ZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChwb2ludCA9PSBcImxvYWRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCZWFjb24odmlkZW8sIHVybCwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICAgICAgICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocG9pbnQgPT09IFwicGF1c2VcIikge1xuICAgICAgICAgICAgICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKFwicGF1c2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJlYWNvbih2aWRlbywgdXJsLCBtYWNyb1JlcGxhY2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwb2ludCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKFwidGltZXVwZGF0ZVwiLCBmdW5jdGlvbiB0aW1lQmVhY29uRXZlbnQoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZGVvLmN1cnJlbnRUaW1lID49IHBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmVhY29uKHZpZGVvLCB1cmwsIG1hY3JvUmVwbGFjZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0aW1ldXBkYXRlXCIsIHRpbWVCZWFjb25FdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJlYWNvbihwYXJlbnQsIHVybCwgbWFjcm9SZXBsYWNlcikge1xuICAgIGlmICghdXJsKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCBlbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIHVybCA9IG1hY3JvUmVwbGFjZXIodXJsLCBudWxsKTtcbiAgICBlbGUuc3JjID0gdXJsO1xuICAgIGVsZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgcGFyZW50LnByZXBlbmQoZWxlKTtcbiAgICBjb25zb2xlLmxvZyhcIltERUJVR10gYmVhY29uIHNlbnQ6IFwiICsgdXJsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZW5kRXJyb3IodXJscywgZXJyb3JDb2RlLCBtYWNyb1JlcGxhY2VyKSB7XG4gICAgaWYgKCF1cmxzKVxuICAgICAgICByZXR1cm47XG4gICAgZm9yIChsZXQgdXJsIG9mIHVybHMpIHtcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcW0VSUk9SQ09ERVxcXS8sIGVycm9yQ29kZS50b1N0cmluZygpKTtcbiAgICAgICAgY3JlYXRlQmVhY29uKGRvY3VtZW50LmJvZHksIHVybCwgbWFjcm9SZXBsYWNlcik7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNldEJlYWNvbnModmlkZW8sIHZhc3RPYmplY3QsIG1hY3JvUmVwbGFjZXIpIHtcbiAgICBzZXRJbXByZXNzaW9uVXJsKHZpZGVvLCB2YXN0T2JqZWN0LmltcHJlc3Npb25VcmxzLCBtYWNyb1JlcGxhY2VyKTtcbiAgICBzZXRWaWRlb0NsaWNrVGhyb3VnaFVybCh2aWRlbywgdmFzdE9iamVjdCk7XG4gICAgc2V0VmlkZW9DbGlja1RyYWNraW5nVXJscyh2aWRlbywgdmFzdE9iamVjdCwgbWFjcm9SZXBsYWNlcik7XG4gICAgc2V0VHJhY2tpbmdVcmxzKHZpZGVvLCB2YXN0T2JqZWN0LCBtYWNyb1JlcGxhY2VyKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VGltZVRvU2Vjb25kKGR1cmF0aW9uU3RyKSB7XG4gICAgbGV0IHJlc3VsdCA9IGR1cmF0aW9uU3RyLm1hdGNoKC8oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KVxcLj8oXFxkezN9KT8vKTtcbiAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoIDwgNCB8fCBwYXJzZUludChyZXN1bHRbMV0pID09PSBOYU4gfHwgcGFyc2VJbnQocmVzdWx0WzJdKSA9PT0gTmFOIHx8IHBhcnNlSW50KHJlc3VsdFszXSkgPT09IE5hTikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb252ZXJ0ZHVyYXRpb25Ub1NlY29uZCBlcnJvcjogXCIgKyBkdXJhdGlvblN0cik7XG4gICAgfVxuICAgIGlmIChyZXN1bHQubGVuZ3RoID09IDUgJiYgcGFyc2VJbnQocmVzdWx0WzRdKSAhPSBOYU4pIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHJlc3VsdFsxXSkgKiA2MCAqIDYwICsgcGFyc2VJbnQocmVzdWx0WzJdKSAqIDYwICsgcGFyc2VGbG9hdChyZXN1bHRbM10gKyBcIi5cIiArIHJlc3VsdFs0XSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludChyZXN1bHRbMV0pICogNjAgKiA2MCArIHBhcnNlSW50KHJlc3VsdFsyXSkgKiA2MCArIHBhcnNlRmxvYXQocmVzdWx0WzNdKTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZUJlYWNvbiB9IGZyb20gXCIuL2JlYWNvblwiO1xuaW1wb3J0IHsgY29udmVydFRpbWVUb1NlY29uZCB9IGZyb20gXCIuLi8uLi91dGlsL3RpbWVcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJY29ucyhpY29uRWxlcykge1xuICAgIGxldCBpY29uT2JqZWN0cyA9IFtdO1xuICAgIGZvciAobGV0IGljb24gb2YgaWNvbkVsZXMpIHtcbiAgICAgICAgbGV0IGljb25FbGUgPSBpY29uO1xuICAgICAgICBsZXQgd2lkdGggPSBwYXJzZUludChpY29uRWxlLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpIHx8IFwiMTBcIikgfHwgMTA7XG4gICAgICAgIGxldCBoZWlnaHQgPSBwYXJzZUludChpY29uRWxlLmdldEF0dHJpYnV0ZShcImhlaWdodFwiKSB8fCBcIjEwXCIpIHx8IDEwO1xuICAgICAgICBsZXQgeCA9IFwiMHB4XCI7XG4gICAgICAgIGxldCB4UG9zaXRpb24gPSBpY29uRWxlLmdldEF0dHJpYnV0ZShcInhQb3NpdGlvblwiKTtcbiAgICAgICAgaWYgKHhQb3NpdGlvbikge1xuICAgICAgICAgICAgaWYgKHhQb3NpdGlvbiA9PT0gXCJsZWZ0XCIgfHwgeFBvc2l0aW9uID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgICB4ID0geFBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeCA9IHhQb3NpdGlvbiArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgeSA9IFwiMHB4XCI7XG4gICAgICAgIGxldCB5UG9zaXRpb24gPSBpY29uRWxlLmdldEF0dHJpYnV0ZShcInlQb3NpdGlvblwiKTtcbiAgICAgICAgaWYgKHlQb3NpdGlvbikge1xuICAgICAgICAgICAgaWYgKHlQb3NpdGlvbiA9PT0gXCJ0b3BcIiB8fCB5UG9zaXRpb24gPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICAgICAgICB5ID0geVBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeSA9IHlQb3NpdGlvbiArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgb2Zmc2V0ID0gaWNvbkVsZS5nZXRBdHRyaWJ1dGUoXCJvZmZzZXRcIik7XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGlmIChvZmZzZXQpXG4gICAgICAgICAgICBzdGFydCA9IGNvbnZlcnRUaW1lVG9TZWNvbmQob2Zmc2V0KTtcbiAgICAgICAgbGV0IGR1cmF0aW9uID0gaWNvbkVsZS5nZXRBdHRyaWJ1dGUoXCJkdXJhdGlvblwiKTtcbiAgICAgICAgbGV0IGVuZCA9IG51bGw7XG4gICAgICAgIGlmIChkdXJhdGlvbilcbiAgICAgICAgICAgIGVuZCA9IGNvbnZlcnRUaW1lVG9TZWNvbmQoZHVyYXRpb24pICsgc3RhcnQ7XG4gICAgICAgIGNvbnN0IHN0YXRpY1Jlc291cmNlID0gaWNvbkVsZS5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlPlN0YXRpY1Jlc291cmNlXCIpO1xuICAgICAgICBpZiAoIXN0YXRpY1Jlc291cmNlIHx8ICFzdGF0aWNSZXNvdXJjZS50ZXh0Q29udGVudClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBpY29uQ2xpY2tUaHJvdWdoID0gaWNvbkVsZS5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlPkljb25DbGlja3M+SWNvbkNsaWNrVGhyb3VnaFwiKTtcbiAgICAgICAgY29uc3QgaWNvbkNsaWNrVHJhY2tpbmcgPSBpY29uRWxlLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGU+SWNvbkNsaWNrcz5JY29uQ2xpY2tUcmFja2luZ1wiKTtcbiAgICAgICAgaWNvbk9iamVjdHMucHVzaCh7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHhQb3NpdGlvbjogeCxcbiAgICAgICAgICAgIHlQb3NpdGlvbjogeSxcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgIGVuZDogZW5kLFxuICAgICAgICAgICAgaW1nVXJsOiBzdGF0aWNSZXNvdXJjZS50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGNsaWNrVGhyb3VnaFVybDogaWNvbkNsaWNrVGhyb3VnaD8udGV4dENvbnRlbnQgPz8gbnVsbCxcbiAgICAgICAgICAgIGNsaWNrVHJhY2tpbmdVcmw6IGljb25DbGlja1RyYWNraW5nPy50ZXh0Q29udGVudCA/PyBudWxsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaWNvbk9iamVjdHM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0SWNvbnModmlkZW8sIGljb25QYXJlbnQsIHZhc3RPYmplY3QsIG1hY3JvUmVwbGFjZXIpIHtcbiAgICBmb3IgKGxldCBjcmVhdGl2ZSBvZiB2YXN0T2JqZWN0LmNyZWF0aXZlcykge1xuICAgICAgICBmb3IgKGxldCBpY29uT2JqIG9mIGNyZWF0aXZlLmxpbmVhci5pY29ucykge1xuICAgICAgICAgICAgbGV0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgaWNvbi5zcmMgPSBpY29uT2JqLmltZ1VybDtcbiAgICAgICAgICAgIGljb24ud2lkdGggPSBpY29uT2JqLndpZHRoO1xuICAgICAgICAgICAgaWNvbi5oZWlnaHQgPSBpY29uT2JqLmhlaWdodDtcbiAgICAgICAgICAgIGljb24uc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgICAgICAgICBpZiAoaWNvbk9iai54UG9zaXRpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAgICAgICAgICAgaWNvbi5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGljb25PYmoueFBvc2l0aW9uID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgICBpY29uLnN0eWxlLnJpZ2h0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGljb24uc3R5bGUubGVmdCA9IGljb25PYmoueFBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGljb25PYmoueVBvc2l0aW9uID09PSBcInRvcFwiKSB7XG4gICAgICAgICAgICAgICAgaWNvbi5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaWNvbk9iai55UG9zaXRpb24gPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICAgICAgICBpY29uLnN0eWxlLmJvdHRvbSA9IFwiMHB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpY29uLnN0eWxlLnRvcCA9IGljb25PYmoueVBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaWNvbk9iai5jbGlja1RyYWNraW5nVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJlYWNvbih2aWRlbywgaWNvbk9iai5jbGlja1RyYWNraW5nVXJsLCBtYWNyb1JlcGxhY2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGljb25PYmouY2xpY2tUaHJvdWdoVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wZW4oaWNvbk9iai5jbGlja1Rocm91Z2hVcmwsIFwiX2JsYW5rXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIiwgZnVuY3Rpb24gdGltZUljb25FdmVudChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpY29uUGFyZW50LmNvbnRhaW5zKGljb24pICYmIHZpZGVvLmN1cnJlbnRUaW1lID49IGljb25PYmouc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvblBhcmVudC5hcHBlbmRDaGlsZChpY29uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGljb25PYmouZW5kICYmIGljb25QYXJlbnQuY29udGFpbnMoaWNvbikgJiYgdmlkZW8uY3VycmVudFRpbWUgPj0gaWNvbk9iai5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvblBhcmVudC5yZW1vdmVDaGlsZChpY29uKTtcbiAgICAgICAgICAgICAgICAgICAgdmlkZW8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIiwgdGltZUljb25FdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBlbmTmnKrlrprnvqnjga5pY29u44Gu5YmK6ZmkXG4gICAgICAgICAgICBpZiAoIWljb25PYmouZW5kKSB7XG4gICAgICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpY29uUGFyZW50LmNvbnRhaW5zKGljb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uUGFyZW50LnJlbW92ZUNoaWxkKGljb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgdmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlhNTFBhcnNlRXJyb3JcIl0gPSAxMDBdID0gXCJYTUxQYXJzZUVycm9yXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlZBU1RTY2hlbWFWYWxpZGF0aW9uRXJyb3JcIl0gPSAxMDFdID0gXCJWQVNUU2NoZW1hVmFsaWRhdGlvbkVycm9yXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlZBU1RWZXJzaW9uT2ZSZXNwb25zZU5vdFN1cHBvcnRlZFwiXSA9IDEwMl0gPSBcIlZBU1RWZXJzaW9uT2ZSZXNwb25zZU5vdFN1cHBvcnRlZFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJOb25QbGF5YWJsZUFkVHlwZVwiXSA9IDIwMF0gPSBcIk5vblBsYXlhYmxlQWRUeXBlXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIk1lZGlhUGxheWVyRXhwZWN0aW5nRGlmZmVyZW50TGluZWFyaXR5XCJdID0gMjAxXSA9IFwiTWVkaWFQbGF5ZXJFeHBlY3RpbmdEaWZmZXJlbnRMaW5lYXJpdHlcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTWVkaWFQbGF5ZXJFeHBlY3RpbmdEaWZmZXJlbnREdXJhdGlvblwiXSA9IDIwMl0gPSBcIk1lZGlhUGxheWVyRXhwZWN0aW5nRGlmZmVyZW50RHVyYXRpb25cIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTWVkaWFQbGF5ZXJFeHBlY3RpbmdEaWZmZXJlbnRTaXplXCJdID0gMjAzXSA9IFwiTWVkaWFQbGF5ZXJFeHBlY3RpbmdEaWZmZXJlbnRTaXplXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkFkQ2F0ZWdvcnlOb3RQcm92aWRlZFwiXSA9IDIwNF0gPSBcIkFkQ2F0ZWdvcnlOb3RQcm92aWRlZFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJJbmxpbmVDYXRlZ29yeVZpb2xhdGVzV3JhcHBlckJsb2NrZWRBZENhdGVnb3JpZXNcIl0gPSAyMDVdID0gXCJJbmxpbmVDYXRlZ29yeVZpb2xhdGVzV3JhcHBlckJsb2NrZWRBZENhdGVnb3JpZXNcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiQWROb3RTZXJ2ZWRcIl0gPSAyMDZdID0gXCJBZE5vdFNlcnZlZFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJHZW5lcmFsV3JhcHBlckVycm9yXCJdID0gMzAwXSA9IFwiR2VuZXJhbFdyYXBwZXJFcnJvclwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJWQVNUVVJJVW5hdmFpbGFibGVPclRpbWVvdXRcIl0gPSAzMDFdID0gXCJWQVNUVVJJVW5hdmFpbGFibGVPclRpbWVvdXRcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiV3JhcHBlckxpbWl0UmVhY2hlZFwiXSA9IDMwMl0gPSBcIldyYXBwZXJMaW1pdFJlYWNoZWRcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTm9WQVNUUmVzcG9uc2VBZnRlcldyYXBwZXJcIl0gPSAzMDNdID0gXCJOb1ZBU1RSZXNwb25zZUFmdGVyV3JhcHBlclwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJBZFVuaXROb3REaXNwbGF5ZWRcIl0gPSAzMDRdID0gXCJBZFVuaXROb3REaXNwbGF5ZWRcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiR2VuZXJhbExpbmVhckVycm9yXCJdID0gNDAwXSA9IFwiR2VuZXJhbExpbmVhckVycm9yXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkZpbGVOb3RGb3VuZFwiXSA9IDQwMV0gPSBcIkZpbGVOb3RGb3VuZFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJNZWRpYUZpbGVVUklUaW1lb3V0XCJdID0gNDAyXSA9IFwiTWVkaWFGaWxlVVJJVGltZW91dFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJTdXBwb3J0ZWRNZWRpYUZpbGVOb3RGb3VuZFwiXSA9IDQwM10gPSBcIlN1cHBvcnRlZE1lZGlhRmlsZU5vdEZvdW5kXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlByb2JsZW1EaXNwbGF5aW5nTWVkaWFGaWxlXCJdID0gNDA1XSA9IFwiUHJvYmxlbURpc3BsYXlpbmdNZWRpYUZpbGVcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTWV6emFuaW5lTm90UHJvdmlkZWRcIl0gPSA0MDZdID0gXCJNZXp6YW5pbmVOb3RQcm92aWRlZFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJNZXp6YW5pbmVEb3dubG9hZGluZ1wiXSA9IDQwN10gPSBcIk1lenphbmluZURvd25sb2FkaW5nXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkNvbmRpdGlvbmFsQWRSZWplY3RlZFwiXSA9IDQwOF0gPSBcIkNvbmRpdGlvbmFsQWRSZWplY3RlZFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJJbnRlcmFjdGl2ZVVuaXROb3RFeGVjdXRlZFwiXSA9IDQwOV0gPSBcIkludGVyYWN0aXZlVW5pdE5vdEV4ZWN1dGVkXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlZlcmlmaWNhdGlvblVuaXROb3RFeGVjdXRlZFwiXSA9IDQxMF0gPSBcIlZlcmlmaWNhdGlvblVuaXROb3RFeGVjdXRlZFwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJOb3RSZXF1aXJlZFNwZWNpZmljYXRpb25PZk1lenphbmluZVwiXSA9IDQxMV0gPSBcIk5vdFJlcXVpcmVkU3BlY2lmaWNhdGlvbk9mTWV6emFuaW5lXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkdlbmVyYWxOb25MaW5lYXJBZHNFcnJvclwiXSA9IDUwMF0gPSBcIkdlbmVyYWxOb25MaW5lYXJBZHNFcnJvclwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJOb25MaW5lYXJBZE5vbkRpc3BsYXlhYmxlXCJdID0gNTAxXSA9IFwiTm9uTGluZWFyQWROb25EaXNwbGF5YWJsZVwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJVbmFibGVUb0ZldGNoTm9uTGluZWFyUmVzb3VyY2VcIl0gPSA1MDJdID0gXCJVbmFibGVUb0ZldGNoTm9uTGluZWFyUmVzb3VyY2VcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiU3VwcG9ydGVkTm9uTGluZWFyUmVzb3VyY2VOb3RGb3VuZFwiXSA9IDUwM10gPSBcIlN1cHBvcnRlZE5vbkxpbmVhclJlc291cmNlTm90Rm91bmRcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiR2VuZXJhbENvbXBhbmlvbkFkc0Vycm9yXCJdID0gNjAwXSA9IFwiR2VuZXJhbENvbXBhbmlvbkFkc0Vycm9yXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkNvbXBhbmlvbk5vbkRpc3BsYXlhYmxlQnlEaW1lbXNpb25FcnJvclwiXSA9IDYwMV0gPSBcIkNvbXBhbmlvbk5vbkRpc3BsYXlhYmxlQnlEaW1lbXNpb25FcnJvclwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJSZXF1aXJlZENvbXBhbmlvbk5vbkRpc3BsYXlhYmxlXCJdID0gNjAyXSA9IFwiUmVxdWlyZWRDb21wYW5pb25Ob25EaXNwbGF5YWJsZVwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJVbmFibGVUb0ZldGNoTm9uQ29tcGFuaW9uUmVzb3VyY2VcIl0gPSA2MDNdID0gXCJVbmFibGVUb0ZldGNoTm9uQ29tcGFuaW9uUmVzb3VyY2VcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiU3VwcG9ydGVkQ29tcGFuaW9uUmVzb3VyY2VOb3RGb3VuZFwiXSA9IDYwNF0gPSBcIlN1cHBvcnRlZENvbXBhbmlvblJlc291cmNlTm90Rm91bmRcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiVW5kZWZpbmVkRXJyb3JcIl0gPSA5MDBdID0gXCJVbmRlZmluZWRFcnJvclwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJHZW5lcmFsVlBBSURFcnJvclwiXSA9IDkwMV0gPSBcIkdlbmVyYWxWUEFJREVycm9yXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkdlbmVyYWxJbnRlcmFjdGl2ZUNyZWF0aXZlRmlsZUVycm9yXCJdID0gOTAyXSA9IFwiR2VuZXJhbEludGVyYWN0aXZlQ3JlYXRpdmVGaWxlRXJyb3JcIjtcbn0pKEVycm9yQ29kZSB8fCAoRXJyb3JDb2RlID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXBsYWNlcih2aWRlb1BhcmVudCkge1xuICAgIGxldCByZXBsYWNlTWFwID0gbmV3IE1hcCgpO1xuICAgIC8vIHRpbWUgc3RhbXBcbiAgICByZXBsYWNlTWFwLnNldChcIltUSU1FU1RBTVBdXCIsIGdldFRpbWVzdGFtcCgpKTtcbiAgICAvLyBpbnZpZXcgcmF0aW9cbiAgICBjb25zdCBpbnZpZXdSYXRpb01nciA9IHtcbiAgICAgICAgcmF0aW86IDBcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHJvb3RNYXJnaW46IFwiMHB4XCIsXG4gICAgICAgIHRocmVzaG9sZDogWzAsIDAuMSwgMC4yLCAwLjMsIDAuNCwgMC41LCAwLjYsIDAuNywgMC44LCAwLjksIDFdXG4gICAgfTtcbiAgICBmdW5jdGlvbiBjYWxsYmFjayhlbnRyaWVzKSB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gTWF0aC5mbG9vcihlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyAqIDEwMCkgLyAxMDA7XG4gICAgICAgICAgICBpbnZpZXdSYXRpb01nci5yYXRpbyA9IHJhdGlvO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdGlvbnMpO1xuICAgIG9ic2VydmVyLm9ic2VydmUodmlkZW9QYXJlbnQpO1xuICAgIHJlcGxhY2VNYXAuc2V0KFwiW0lOVklFV19SQVRJT11cIiwgZ2V0SW52aWV3UmF0aW8oaW52aWV3UmF0aW9NZ3IpKTtcbiAgICByZXR1cm4gKHRhcmdldCwgZXJyb3JDb2RlKSA9PiB7XG4gICAgICAgIGlmIChlcnJvckNvZGUpIHtcbiAgICAgICAgICAgIHJlcGxhY2VNYXAuc2V0KFwiW0VSUk9SQ09ERV1cIiwgZXJyb3JDb2RlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJlcGxhY2VNYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnJlcGxhY2Uoa2V5LCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlKCkgOiB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRUaW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRJbnZpZXdSYXRpbyhpbnZpZXdSYXRpb01ncikge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBpbnZpZXdSYXRpb01nci5yYXRpby50b0ZpeGVkKDIpO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBzZW5kRXJyb3IgfSBmcm9tIFwiLi9iZWFjb25cIjtcbmltcG9ydCB7IGNyZWF0ZUljb25zIH0gZnJvbSBcIi4vaWNvblwiO1xuaW1wb3J0IHsgRXJyb3JDb2RlIH0gZnJvbSBcIi4uLy4uL3V0aWwvbWFjcm9cIjtcbmltcG9ydCB7IGNvbnZlcnRUaW1lVG9TZWNvbmQgfSBmcm9tIFwiLi4vLi4vdXRpbC90aW1lXCI7XG5jb25zdCBXUkFQUEVSX01BWCA9IDU7XG5jb25zdCBUUkFDS0lOR19FVkVOVF9QT0lOVCA9IG5ldyBNYXAoW1xuICAgIFtcInN0YXJ0XCIsIDBdLFxuICAgIFtcImZpcnN0UXVhcnRpbGVcIiwgMSAvIDRdLFxuICAgIFtcIm1pZHBvaW50XCIsIDEgLyAyXSxcbiAgICBbXCJ0aGlyZFF1YXJ0aWxlXCIsIDMgLyA0XSxcbiAgICBbXCJjb21wbGV0ZVwiLCAxXVxuXSk7XG5mdW5jdGlvbiBpbml0VmFzdE9iamVjdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJvclVybHM6IFtdLFxuICAgICAgICBpbXByZXNzaW9uVXJsczogW10sXG4gICAgICAgIGFkVGl0bGU6IFwiXCIsXG4gICAgICAgIGFkRGVzYzogXCJcIixcbiAgICAgICAgY3JlYXRpdmVzOiBbXVxuICAgIH07XG59XG5jbGFzcyBWYXN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG4gICAgaXNXcmFwcGVyKHZFbGUpIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlckVsZSA9IHZFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5BZD5XcmFwcGVyXCIpO1xuICAgICAgICBpZiAod3JhcHBlckVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBuZXh0VmFzdCh2RWxlKSB7XG4gICAgICAgIGNvbnN0IHZhc3RBZFRhZ1VSSUVsZSA9IHZFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5BZD5XcmFwcGVyPlZBU1RBZFRhZ1VSSVwiKTtcbiAgICAgICAgaWYgKCF2YXN0QWRUYWdVUklFbGUgfHwgIXZhc3RBZFRhZ1VSSUVsZS50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibmV4dCB2YXN0IHVybCBlcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdXJsID0gdmFzdEFkVGFnVVJJRWxlLnRleHRDb250ZW50O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlVmFzdChzb3VyY2VWYXN0LCBtYWNyb1JlcGxhY2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgdmFzdE9iamVjdCA9IGluaXRWYXN0T2JqZWN0KCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBXUkFQUEVSX01BWDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgVkFTVCB0byBPYmplY3RcbiAgICAgICAgICAgICAgICBsZXQgdmFzdEVsZSA9IHRoaXMucGFyc2VWYXN0WE1MKHNvdXJjZVZhc3QpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzV3JhcHBlcih2YXN0RWxlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBXUkFQUEVSX01BWCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidG9vIG1hbnkgd3JhcHBlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXN0T2JqZWN0ID0gdGhpcy51cGRhdGVXcmFwcGVyVmFzdE9iamVjdCh2YXN0T2JqZWN0LCB2YXN0RWxlLCBtYWNyb1JlcGxhY2VyKTtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVmFzdCA9IGF3YWl0IHRoaXMubmV4dFZhc3QodmFzdEVsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXN0T2JqZWN0ID0gdGhpcy51cGRhdGVJbmxpbmVWYXN0T2JqZWN0KHZhc3RPYmplY3QsIHZhc3RFbGUsIG1hY3JvUmVwbGFjZXIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFzdE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbRVJST1JdIGNhbm5vdCBjcmVhdGUgVkFTVE9iamVjdDogXCIgKyBlKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhcnNlVmFzdFhNTChzb3VyY2VWYXN0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgbGV0IHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc291cmNlVmFzdCwgXCJhcHBsaWNhdGlvbi94bWxcIik7XG4gICAgICAgIGxldCBwYXJzZXJFcnJvciA9IHhtbERvYy5xdWVyeVNlbGVjdG9yKFwicGFyc2VyZXJyb3JcIik7XG4gICAgICAgIGlmIChwYXJzZXJFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHBhcnNlckVycm9yLnRleHRDb250ZW50IHx8IFwicGFyc2UgdmFzdCBlcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFzdEVsZSA9IHhtbERvYy5xdWVyeVNlbGVjdG9yKFwiVkFTVFwiKTtcbiAgICAgICAgaWYgKCF2YXN0RWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWQVNUIHRhZyBub3QgZm91bmRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhc3RFbGU7XG4gICAgfVxuICAgIHVwZGF0ZVdyYXBwZXJWYXN0T2JqZWN0KHZhc3RPYmplY3QsIHZFbGUsIG1hY3JvUmVwbGFjZXIpIHtcbiAgICAgICAgbGV0IGVycm9yVXJscyA9IFtdO1xuICAgICAgICBjb25zdCByb290RXJyb3JFbGUgPSB2RWxlLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGU+RXJyb3JcIik7XG4gICAgICAgIGlmIChyb290RXJyb3JFbGUgJiYgcm9vdEVycm9yRWxlLnRleHRDb250ZW50KVxuICAgICAgICAgICAgZXJyb3JVcmxzLnB1c2gocm9vdEVycm9yRWxlLnRleHRDb250ZW50KTtcbiAgICAgICAgY29uc3Qgd3JhcHBlckVsZSA9IHZFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5BZD5XcmFwcGVyXCIpO1xuICAgICAgICBpZiAoIXdyYXBwZXJFbGUpIHtcbiAgICAgICAgICAgIHNlbmRFcnJvcihlcnJvclVybHMsIEVycm9yQ29kZS5Ob1ZBU1RSZXNwb25zZUFmdGVyV3JhcHBlciwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBXcmFwcGVyIGVycm9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVycm9yRWxlID0gd3JhcHBlckVsZS5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlPkVycm9yXCIpO1xuICAgICAgICBpZiAoZXJyb3JFbGUgJiYgZXJyb3JFbGUudGV4dENvbnRlbnQpXG4gICAgICAgICAgICBlcnJvclVybHMucHVzaChlcnJvckVsZS50ZXh0Q29udGVudCk7XG4gICAgICAgIGNvbnN0IGltcEVsZSA9IHdyYXBwZXJFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5JbXByZXNzaW9uXCIpO1xuICAgICAgICBpZiAoIWltcEVsZSB8fCAhaW1wRWxlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICBzZW5kRXJyb3IoZXJyb3JVcmxzLCBFcnJvckNvZGUuWE1MUGFyc2VFcnJvciwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBXcmFwcGVyIEltcHJlc3Npb24gZXJyb3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1wcmVzc2lvblVybCA9IGltcEVsZS50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3QgbGluZWFyRWxlID0gd3JhcHBlckVsZS5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlPkNyZWF0aXZlcz5DcmVhdGl2ZT5MaW5lYXJcIik7XG4gICAgICAgIGlmICghbGluZWFyRWxlKSB7XG4gICAgICAgICAgICB2YXN0T2JqZWN0LmVycm9yVXJscyA9IHZhc3RPYmplY3QuZXJyb3JVcmxzLmNvbmNhdChlcnJvclVybHMpO1xuICAgICAgICAgICAgdmFzdE9iamVjdC5pbXByZXNzaW9uVXJscy5wdXNoKGltcHJlc3Npb25VcmwpO1xuICAgICAgICAgICAgcmV0dXJuIHZhc3RPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZHVyYXRpb25FbGUgPSBsaW5lYXJFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5EdXJhdGlvblwiKTtcbiAgICAgICAgaWYgKCFkdXJhdGlvbkVsZSB8fCAhZHVyYXRpb25FbGUudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgIHNlbmRFcnJvcihlcnJvclVybHMsIEVycm9yQ29kZS5YTUxQYXJzZUVycm9yLCBtYWNyb1JlcGxhY2VyKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlIFdyYXBwZXIgTGluZWFyIER1cmF0aW9uIGVycm9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gY29udmVydFRpbWVUb1NlY29uZChkdXJhdGlvbkVsZS50ZXh0Q29udGVudCk7XG4gICAgICAgIGNvbnN0IHRyYWNraW5nc0VsZXMgPSBsaW5lYXJFbGUucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZT5UcmFja2luZ0V2ZW50cz5UcmFja2luZ1wiKTtcbiAgICAgICAgY29uc3QgdHJhY2tpbmdNYXAgPSB0aGlzLmNyZWF0ZVRyYWNraW5nT2JqZWN0KHRyYWNraW5nc0VsZXMsIGR1cmF0aW9uKTtcbiAgICAgICAgY29uc3QgaWNvbkVsZXMgPSBsaW5lYXJFbGUucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZT5JY29ucz5JY29uXCIpO1xuICAgICAgICBjb25zdCBpY29ucyA9IGNyZWF0ZUljb25zKGljb25FbGVzKTtcbiAgICAgICAgY29uc3QgdmlkZW9DbGlja3NFbGUgPSBsaW5lYXJFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5WaWRlb0NsaWNrc1wiKTtcbiAgICAgICAgbGV0IGNsaWNrVGhyb3VnaCA9IG51bGw7XG4gICAgICAgIGxldCBjbGlja1RyYWNraW5nID0gW107XG4gICAgICAgIGlmICh2aWRlb0NsaWNrc0VsZSkge1xuICAgICAgICAgICAgY29uc3QgY2xpY2tUaHJvdWdoRWxlID0gdmlkZW9DbGlja3NFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5DbGlja1Rocm91Z2hcIik7XG4gICAgICAgICAgICBpZiAoY2xpY2tUaHJvdWdoRWxlICYmIGNsaWNrVGhyb3VnaEVsZS50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgIGNsaWNrVGhyb3VnaCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY2xpY2tUaHJvdWdoRWxlLnRleHRDb250ZW50XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNsaWNrVHJhY2tpbmdFbGVzID0gdmlkZW9DbGlja3NFbGUucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZT5DbGlja1RyYWNraW5nXCIpO1xuICAgICAgICAgICAgZm9yIChsZXQgY2xpY2tUcmFja2luZ0VsZSBvZiBjbGlja1RyYWNraW5nRWxlcykge1xuICAgICAgICAgICAgICAgIGlmIChjbGlja1RyYWNraW5nRWxlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrVHJhY2tpbmcucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjbGlja1RyYWNraW5nRWxlLnRleHRDb250ZW50XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXN0T2JqZWN0LmVycm9yVXJscyA9IHZhc3RPYmplY3QuZXJyb3JVcmxzLmNvbmNhdChlcnJvclVybHMpO1xuICAgICAgICB2YXN0T2JqZWN0LmltcHJlc3Npb25VcmxzLnB1c2goaW1wcmVzc2lvblVybCk7XG4gICAgICAgIHZhc3RPYmplY3QuY3JlYXRpdmVzLnB1c2goe1xuICAgICAgICAgICAgbGluZWFyOiB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIG1lZGlhRmlsZXM6IFtdLFxuICAgICAgICAgICAgICAgIHRyYWNraW5nRXZlbnRzOiB0cmFja2luZ01hcCxcbiAgICAgICAgICAgICAgICBjbGlja1Rocm91Z2g6IGNsaWNrVGhyb3VnaCxcbiAgICAgICAgICAgICAgICBjbGlja1RyYWNraW5nczogY2xpY2tUcmFja2luZyxcbiAgICAgICAgICAgICAgICBpY29uczogaWNvbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YXN0T2JqZWN0O1xuICAgIH1cbiAgICB1cGRhdGVJbmxpbmVWYXN0T2JqZWN0KHZhc3RPYmplY3QsIHZFbGUsIG1hY3JvUmVwbGFjZXIpIHtcbiAgICAgICAgbGV0IGVycm9yVXJscyA9IFtdO1xuICAgICAgICBjb25zdCByb290RXJyb3JFbGUgPSB2RWxlLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGU+RXJyb3JcIik7XG4gICAgICAgIGlmIChyb290RXJyb3JFbGUgJiYgcm9vdEVycm9yRWxlLnRleHRDb250ZW50KVxuICAgICAgICAgICAgZXJyb3JVcmxzLnB1c2gocm9vdEVycm9yRWxlLnRleHRDb250ZW50KTtcbiAgICAgICAgY29uc3QgaW5saW5lRWxlID0gdkVsZS5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlPkFkPkluTGluZVwiKTtcbiAgICAgICAgaWYgKCFpbmxpbmVFbGUpIHtcbiAgICAgICAgICAgIHNlbmRFcnJvcihlcnJvclVybHMsIEVycm9yQ29kZS5Ob1ZBU1RSZXNwb25zZUFmdGVyV3JhcHBlciwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBJbkxpbmUgZXJyb3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXJyb3JFbGUgPSBpbmxpbmVFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5FcnJvclwiKTtcbiAgICAgICAgaWYgKGVycm9yRWxlICYmIGVycm9yRWxlLnRleHRDb250ZW50KVxuICAgICAgICAgICAgZXJyb3JVcmxzLnB1c2goZXJyb3JFbGUudGV4dENvbnRlbnQpO1xuICAgICAgICBjb25zdCBpbXBFbGUgPSBpbmxpbmVFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5JbXByZXNzaW9uXCIpO1xuICAgICAgICBpZiAoIWltcEVsZSB8fCAhaW1wRWxlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICBzZW5kRXJyb3IoZXJyb3JVcmxzLCBFcnJvckNvZGUuWE1MUGFyc2VFcnJvciwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBJbkxpbmUgSW1wcmVzc2lvbiBlcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbXByZXNzaW9uVXJsID0gaW1wRWxlLnRleHRDb250ZW50O1xuICAgICAgICBjb25zdCBhZFRpdGxlRWxlID0gaW5saW5lRWxlLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGU+QWRUaXRsZVwiKTtcbiAgICAgICAgaWYgKCFhZFRpdGxlRWxlIHx8ICFhZFRpdGxlRWxlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICBzZW5kRXJyb3IoZXJyb3JVcmxzLCBFcnJvckNvZGUuWE1MUGFyc2VFcnJvciwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBJbkxpbmUgQWRUaXRsZSBlcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZFRpdGxlID0gYWRUaXRsZUVsZS50ZXh0Q29udGVudDtcbiAgICAgICAgbGV0IGFkRGVzYyA9IG51bGw7XG4gICAgICAgIGNvbnN0IGFkRGVzY0VsZSA9IGlubGluZUVsZS5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlPkRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBpZiAoYWREZXNjRWxlICYmIGFkRGVzY0VsZS50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgYWREZXNjID0gYWREZXNjRWxlLnRleHRDb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpbmVhckVsZSA9IGlubGluZUVsZS5xdWVyeVNlbGVjdG9yKFwiOnNjb3BlPkNyZWF0aXZlcz5DcmVhdGl2ZT5MaW5lYXJcIik7XG4gICAgICAgIGlmICghbGluZWFyRWxlKSB7XG4gICAgICAgICAgICBzZW5kRXJyb3IoZXJyb3JVcmxzLCBFcnJvckNvZGUuWE1MUGFyc2VFcnJvciwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBJbkxpbmUgTGluZWFyIGVycm9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uRWxlID0gbGluZWFyRWxlLnF1ZXJ5U2VsZWN0b3IoXCI6c2NvcGU+RHVyYXRpb25cIik7XG4gICAgICAgIGlmICghZHVyYXRpb25FbGUgfHwgIWR1cmF0aW9uRWxlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICBzZW5kRXJyb3IoZXJyb3JVcmxzLCBFcnJvckNvZGUuWE1MUGFyc2VFcnJvciwgbWFjcm9SZXBsYWNlcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSBJbkxpbmUgTGluZWFyIER1cmF0aW9uIGVycm9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gY29udmVydFRpbWVUb1NlY29uZChkdXJhdGlvbkVsZS50ZXh0Q29udGVudCk7XG4gICAgICAgIGNvbnN0IHRyYWNraW5nc0VsZXMgPSBsaW5lYXJFbGUucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZT5UcmFja2luZ0V2ZW50cz5UcmFja2luZ1wiKTtcbiAgICAgICAgY29uc3QgdHJhY2tpbmdNYXAgPSB0aGlzLmNyZWF0ZVRyYWNraW5nT2JqZWN0KHRyYWNraW5nc0VsZXMsIGR1cmF0aW9uKTtcbiAgICAgICAgY29uc3QgaWNvbkVsZXMgPSBsaW5lYXJFbGUucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZT5JY29ucz5JY29uXCIpO1xuICAgICAgICBjb25zdCBpY29ucyA9IGNyZWF0ZUljb25zKGljb25FbGVzKTtcbiAgICAgICAgY29uc3QgbWVkaWFGaWxlRWxlcyA9IGxpbmVhckVsZS5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlPk1lZGlhRmlsZXM+TWVkaWFGaWxlXCIpO1xuICAgICAgICBpZiAoIW1lZGlhRmlsZUVsZXMpIHtcbiAgICAgICAgICAgIHNlbmRFcnJvcihlcnJvclVybHMsIEVycm9yQ29kZS5YTUxQYXJzZUVycm9yLCBtYWNyb1JlcGxhY2VyKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlIE1lZGlhRmlsZXMgZXJyb3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44Gy44Go44G+44GaMeOBpOebruOBrk1lZGlhRmlsZeOBrlVSTOOBruOBv+WPluW+l1xuICAgICAgICBjb25zdCBtZWRpYUZpbGVVcmwgPSBtZWRpYUZpbGVFbGVzWzBdPy50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3QgdmlkZW9DbGlja3NFbGUgPSBsaW5lYXJFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5WaWRlb0NsaWNrc1wiKTtcbiAgICAgICAgbGV0IGNsaWNrVGhyb3VnaCA9IG51bGw7XG4gICAgICAgIGxldCBjbGlja1RyYWNraW5nID0gW107XG4gICAgICAgIGlmICh2aWRlb0NsaWNrc0VsZSkge1xuICAgICAgICAgICAgY29uc3QgY2xpY2tUaHJvdWdoRWxlID0gdmlkZW9DbGlja3NFbGUucXVlcnlTZWxlY3RvcihcIjpzY29wZT5DbGlja1Rocm91Z2hcIik7XG4gICAgICAgICAgICBpZiAoIWNsaWNrVGhyb3VnaEVsZSB8fCAhY2xpY2tUaHJvdWdoRWxlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgc2VuZEVycm9yKGVycm9yVXJscywgRXJyb3JDb2RlLlhNTFBhcnNlRXJyb3IsIG1hY3JvUmVwbGFjZXIpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlIEluTGluZSBMaW5lYXIgQ2xpY2tUaHJvdWdoIGVycm9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xpY2tUaHJvdWdoID0ge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNsaWNrVGhyb3VnaEVsZS50ZXh0Q29udGVudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNsaWNrVHJhY2tpbmdFbGVzID0gdmlkZW9DbGlja3NFbGUucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZT5DbGlja1RyYWNraW5nXCIpO1xuICAgICAgICAgICAgZm9yIChsZXQgY2xpY2tUcmFja2luZ0VsZSBvZiBjbGlja1RyYWNraW5nRWxlcykge1xuICAgICAgICAgICAgICAgIGlmIChjbGlja1RyYWNraW5nRWxlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrVHJhY2tpbmcucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjbGlja1RyYWNraW5nRWxlLnRleHRDb250ZW50XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXN0T2JqZWN0LmVycm9yVXJscyA9IHZhc3RPYmplY3QuZXJyb3JVcmxzLmNvbmNhdChlcnJvclVybHMpO1xuICAgICAgICB2YXN0T2JqZWN0LmltcHJlc3Npb25VcmxzLnB1c2goaW1wcmVzc2lvblVybCk7XG4gICAgICAgIHZhc3RPYmplY3QuYWRUaXRsZSA9IGFkVGl0bGU7XG4gICAgICAgIHZhc3RPYmplY3QuYWREZXNjID0gYWREZXNjO1xuICAgICAgICB2YXN0T2JqZWN0LmNyZWF0aXZlcy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmVhcjoge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBtZWRpYUZpbGVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG1lZGlhRmlsZVVybFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB0cmFja2luZ0V2ZW50czogdHJhY2tpbmdNYXAsXG4gICAgICAgICAgICAgICAgY2xpY2tUaHJvdWdoOiBjbGlja1Rocm91Z2gsXG4gICAgICAgICAgICAgICAgY2xpY2tUcmFja2luZ3M6IGNsaWNrVHJhY2tpbmcsXG4gICAgICAgICAgICAgICAgaWNvbnM6IGljb25zXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmFzdE9iamVjdDtcbiAgICB9XG4gICAgY3JlYXRlVHJhY2tpbmdPYmplY3QodHJhY2tpbmdFbGVzLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCB0cmFja2luZ01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdHJhY2tpbmdFbGVzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNraW5nKSB7XG4gICAgICAgICAgICBpZiAoIXRyYWNraW5nLnRleHRDb250ZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdHJhY2tpbmcuZ2V0QXR0cmlidXRlKFwiZXZlbnRcIik7XG4gICAgICAgICAgICBpZiAoIWV2ZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChldmVudCA9PT0gXCJwcm9ncmVzc1wiKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdHJhY2tpbmcuZ2V0QXR0cmlidXRlKFwib2Zmc2V0XCIpO1xuICAgICAgICAgICAgICAgIGlmICghb2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0U2Vjb25kID0gY29udmVydFRpbWVUb1NlY29uZChvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHRyYWNraW5nTWFwLnNldChvZmZzZXRTZWNvbmQsIHRyYWNraW5nLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50X3BvaW50ID0gVFJBQ0tJTkdfRVZFTlRfUE9JTlQuZ2V0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRfcG9pbnQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT09PT09PT09PSBEVVJBVElPSU4gPT09PT09PT06XCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNraW5nTWFwLnNldChldmVudF9wb2ludCAqIGR1cmF0aW9uLCB0cmFja2luZy50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cmFja2luZ01hcC5zZXQoZXZlbnQsIHRyYWNraW5nLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJhY2tpbmdNYXA7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IHZhc3QgPSBuZXcgVmFzdCgpO1xuIiwiaW1wb3J0ICogYXMgbGliIGZyb20gXCIuLi9saWIvaW5kZXhcIjtcbmNvbnN0IGNvbnRhaW5lciA9IGBcbjwhRE9DVFlQRSBodG1sPlxuPGh0bWw+XG4gICAgPGhlYWQ+XG4gICAgPC9oZWFkPlxuICAgIDxib2R5IHN0eWxlPVwibWFyZ2luOjA7XCI+XG4gICAgICAgIDxkaXYgaWQ9XCJ2YXN0X3ZpZGVvX2NvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBpZD1cInZhc3RfdmlkZW9cIiBzdHlsZT1cIndpZHRoOjMwMHB4O2hlaWdodDoxNjguNzVweDtcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJwcm9ncmVzc19iYXJcIiBzdHlsZT1cIndpZHRoOjUwJTtoZWlnaHQ6M3B4O2JhY2tncm91bmQtY29sb3I6Z3JheTtcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJhZF90ZXh0XCIgc3R5bGU9XCJtYXJnaW46MDt3aWR0aDozMDBweDtoZWlnaHQ6NzguMjVweDtiYWNrZ3JvdW5kLWNvbG9yOiNkY2RjZGM7XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImFkX3RpdGxlXCIgc3R5bGU9XCJmb250LXNpemU6MTVweDtmb250LXdlaWdodDpib2xkO1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJhZF9kZXNjXCIgc3R5bGU9XCJmb250LXNpemU6MTBweDtcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2JvZHk+XG48L2h0bWw+XG5gO1xuY29uc3QgaW5saW5lVmFzdFNhbXBsZSA9IGBcbjxWQVNUIHZlcnNpb249XCI0LjJcIj5cbiAgPEVycm9yPlxuICAgIDwhW0NEQVRBW2h0dHA6Ly90ZXN0LmV4YW1wbGUvZXJyb3I/Y29kZT1bRVJST1JDT0RFXSZjbGllbnRUaW1lPVtUSU1FU1RBTVBdXV0+XG4gIDwvRXJyb3I+XG4gIDxBZCBpZD1cIjFiMzMwZTU5LTNhNjItNDAwMC1iOWZiLWFjOTcyNmU5OGM1MlwiIHNlcXVlbmNlPVwiMVwiPlxuICAgIDxXcmFwcGVyPlxuICAgICAgPEltcHJlc3Npb24+PCFbQ0RBVEFbaHR0cHM6Ly93cmFwcGVyLnRlc3QuZXhhbXBsZS9pbXByZXNzaW9uP2NsaWVudFRpbWU9W1RJTUVTVEFNUF0maW52aWV3X3JhdGlvPVtJTlZJRVdfUkFUSU9dXV0+PC9JbXByZXNzaW9uPlxuICAgICAgPFZBU1RBZFRhZ1VSST5cbiAgICAgICAgPCFbQ0RBVEFbaHR0cDovL2xvY2FsaG9zdDo4MDgwL3NhbXBsZS9pbmxpbmUuaHRtbF1dPlxuICAgICAgPC9WQVNUQWRUYWdVUkk+XG4gICAgICA8Q3JlYXRpdmVzPlxuICAgICAgICA8Q3JlYXRpdmUgYWRJZD1cIjcyNDVcIiBzZXF1ZW5jZT1cIjFcIj5cbiAgICAgICAgICA8TGluZWFyPlxuICAgICAgICAgICAgPER1cmF0aW9uPjAwOjAwOjE0LjAxNDwvRHVyYXRpb24+XG4gICAgICAgICAgICA8VHJhY2tpbmdFdmVudHM+XG4gICAgICAgICAgICAgIDxUcmFja2luZyBldmVudD1cInN0YXJ0XCI+PCFbQ0RBVEFbaHR0cHM6Ly93cmFwcGVyLnRlc3QuZXhhbXBsZS9zdGFydD9jbGllbnRUaW1lPVtUSU1FU1RBTVBdJmludmlld19yYXRpbz1bSU5WSUVXX1JBVElPXV1dPjwvVHJhY2tpbmc+XG4gICAgICAgICAgICAgIDxUcmFja2luZyBldmVudD1cImZpcnN0UXVhcnRpbGVcIj48IVtDREFUQVtodHRwczovL3dyYXBwZXIudGVzdC5leGFtcGxlL2ZpcnN0UXVhcnRpbGU/Y2xpZW50VGltZT1bVElNRVNUQU1QXSZpbnZpZXdfcmF0aW89W0lOVklFV19SQVRJT11dXT48L1RyYWNraW5nPlxuICAgICAgICAgICAgICA8VHJhY2tpbmcgZXZlbnQ9XCJjb21wbGV0ZVwiPjwhW0NEQVRBW2h0dHBzOi8vd3JhcHBlci50ZXN0LmV4YW1wbGUvY29tcGxldGU/Y2xpZW50VGltZT1bVElNRVNUQU1QXSZpbnZpZXdfcmF0aW89W0lOVklFV19SQVRJT11dXT48L1RyYWNraW5nPlxuICAgICAgICAgICAgPC9UcmFja2luZ0V2ZW50cz5cbiAgICAgICAgICA8L0xpbmVhcj5cbiAgICAgICAgPC9DcmVhdGl2ZT5cbiAgICAgIDwvQ3JlYXRpdmVzPlxuICAgIDwvV3JhcHBlcj5cbiAgPC9BZD5cbjwvVkFTVD5cbmA7XG5jbGFzcyBWYXN0RXhlY3V0b3Ige1xuICAgIGFzeW5jIHN0YXJ0UGxheWVyKHNvdXJjZVZhc3QpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZXRQbGF5ZXIgc3RhcnRlZC4uLlwiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICAgICAgaWZyYW1lLndpZHRoID0gXCIzMDBweFwiO1xuICAgICAgICAgICAgaWZyYW1lLmhlaWdodCA9IFwiMjUwcHhcIjtcbiAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5ib3JkZXIgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWVyYm94XCIpPy5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgbGV0IGlEb2MgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgICAgICAgICAgIGlEb2Mub3BlbigpO1xuICAgICAgICAgICAgaURvYy53cml0ZShjb250YWluZXIpO1xuICAgICAgICAgICAgaURvYy5jbG9zZSgpO1xuICAgICAgICAgICAgaURvYy5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgbGV0IHZhc3RWaWRlb0RpdiA9IGlEb2MuZ2V0RWxlbWVudEJ5SWQoXCJ2YXN0X3ZpZGVvXCIpO1xuICAgICAgICAgICAgY29uc3QgbWFjcm9SZXBsYWNlciA9IGxpYi5jcmVhdGVSZXBsYWNlcih2YXN0VmlkZW9EaXYpO1xuICAgICAgICAgICAgc291cmNlVmFzdCA9IGlubGluZVZhc3RTYW1wbGU7XG4gICAgICAgICAgICBjb25zdCB2YXN0T2JqZWN0ID0gYXdhaXQgbGliLnZhc3QucGFyc2VWYXN0KHNvdXJjZVZhc3QsIG1hY3JvUmVwbGFjZXIpO1xuICAgICAgICAgICAgaWYgKCF2YXN0T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGFkVGl0bGVEaXYgPSBpRG9jLmdldEVsZW1lbnRCeUlkKFwiYWRfdGl0bGVcIik7XG4gICAgICAgICAgICBhZFRpdGxlRGl2LnRleHRDb250ZW50ID0gdmFzdE9iamVjdC5hZFRpdGxlO1xuICAgICAgICAgICAgbGV0IGFkRGVzY0RpdiA9IGlEb2MuZ2V0RWxlbWVudEJ5SWQoXCJhZF9kZXNjXCIpO1xuICAgICAgICAgICAgaWYgKHZhc3RPYmplY3QuYWREZXNjKSB7XG4gICAgICAgICAgICAgICAgYWREZXNjRGl2LnRleHRDb250ZW50ID0gdmFzdE9iamVjdC5hZERlc2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7XG4gICAgICAgICAgICB2YXN0VmlkZW9EaXYuYXBwZW5kQ2hpbGQodmlkZW8pO1xuICAgICAgICAgICAgZm9yIChsZXQgY3JlYXRpdmUgb2YgdmFzdE9iamVjdC5jcmVhdGl2ZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBtZWRpYUZpbGUgb2YgY3JlYXRpdmUubGluZWFyLm1lZGlhRmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNvdXJjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzb3VyY2VcIik7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zcmMgPSBtZWRpYUZpbGUuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1lZGlhVHlwZSA9IGxpYi5nZXRNZWRpYVR5cGUobWVkaWFGaWxlLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVkaWFUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UudHlwZSA9IG1lZGlhVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2aWRlby5hcHBlbmRDaGlsZChzb3VyY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vdmlkZW8uc3JjID0gdmFzdE9iamVjdC5tZWRpYUZpbGVVcmw7XG4gICAgICAgICAgICB2aWRlby5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgdmlkZW8uc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgICAgICB2aWRlby5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgICB2aWRlby5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgICAvLyBsb2FkZWRtZXRhZGF0YeOCpOODmeODs+ODiOW+jOOBp+OBquOBhOOBqGR1cmF0aW9u44GM5Y+W44KM44Gq44GEXG4gICAgICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkbWV0YWRhdGFcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT0gRFVSQVRJT04gT0YgVklERU8gVEFHID09PT09PT09PTpcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codmlkZW8uZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGxldCBwcm9ncmVzc2JhciA9IGlEb2MuZ2V0RWxlbWVudEJ5SWQoXCJwcm9ncmVzc19iYXJcIik7XG4gICAgICAgICAgICAgICAgbGV0IGJhckFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9ncmVzc1BvaW50ID0gdmlkZW8uY3VycmVudFRpbWUgLyB2aWRlby5kdXJhdGlvbiAqIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NiYXIuc3R5bGUud2lkdGggPSBwcm9ncmVzc1BvaW50ICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShiYXJBbmltYXRpb25Mb29wKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShiYXJBbmltYXRpb25Mb29wKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGliLnNldEJlYWNvbnModmlkZW8sIHZhc3RPYmplY3QsIG1hY3JvUmVwbGFjZXIpO1xuICAgICAgICAgICAgbGliLnNldEljb25zKHZpZGVvLCB2YXN0VmlkZW9EaXYsIHZhc3RPYmplY3QsIG1hY3JvUmVwbGFjZXIpO1xuICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PSBWSURFTyBQQVVTRSA9PT09PT09PT09PT09PT09PT09PT1cIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEludGVyc2VjdGlvbk9ic2VydmVyXG4gICAgICAgICAgICAvLyA1MCXnlLvpnaLlhoXjgavlhaXjgaPjgZ/jgonlho3nlJ/jgIHlh7rjgZ/jgonlgZzmraJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogXCIwcHhcIixcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDAuNVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8ucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ+fn5+VEhJUyBJUyBQQVVTRSBFVkVOVCEhISEhISEhISEhISEhISEhISEhISEhISEhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8ucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdGlvbnMpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh2aWRlbyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2Fubm90IHN0YXJ0IFBsYXllcjogXCIgKyBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IHZhc3RFeGVjdXRvciA9IG5ldyBWYXN0RXhlY3V0b3IoKTtcbndpbmRvdy52YXN0RXhlY3V0b3IgPSB3aW5kb3cudmFzdEV4ZWN1dG9yIHx8IHZhc3RFeGVjdXRvcjtcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRNZWRpYVR5cGUodXJsKSB7XG4gICAgaWYgKC9cXC5tcDQkLy50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIFwidmlkZW8vbXA0XCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKC9cXC5tb3YkLy50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIFwidmlkZW8vcXVpY2t0aW1lXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKC9cXC5tcGckLy50ZXN0KHVybCkgfHwgL1xcLm1wZWckLy50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIFwidmlkZW8vbXBlZ1wiO1xuICAgIH1cbiAgICBlbHNlIGlmICgvXFwud2VibSQvLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gXCJ2aWRlby93ZWJtXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlQmVhY29uIiwicGFyZW50IiwidXJsIiwibWFjcm9SZXBsYWNlciIsIkRhdGUiLCJlbGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJzdHlsZSIsImRpc3BsYXkiLCJwcmVwZW5kIiwiY29uc29sZSIsImxvZyIsInNlbmRFcnJvciIsInVybHMiLCJlcnJvckNvZGUiLCJyZXBsYWNlIiwidG9TdHJpbmciLCJib2R5IiwiY29udmVydFRpbWVUb1NlY29uZCIsImR1cmF0aW9uU3RyIiwicmVzdWx0IiwibWF0Y2giLCJsZW5ndGgiLCJOYU4iLCJwYXJzZUludCIsIkVycm9yIiwicGFyc2VGbG9hdCIsImNyZWF0ZUljb25zIiwiaWNvbkVsZXMiLCJpY29uT2JqZWN0cyIsImljb24iLCJpY29uRWxlIiwid2lkdGgiLCJnZXRBdHRyaWJ1dGUiLCJoZWlnaHQiLCJ4IiwieFBvc2l0aW9uIiwieSIsInlQb3NpdGlvbiIsIm9mZnNldCIsInN0YXJ0IiwiZHVyYXRpb24iLCJlbmQiLCJzdGF0aWNSZXNvdXJjZSIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsImljb25DbGlja1Rocm91Z2giLCJpY29uQ2xpY2tUcmFja2luZyIsInB1c2giLCJpbWdVcmwiLCJjbGlja1Rocm91Z2hVcmwiLCJjbGlja1RyYWNraW5nVXJsIiwiRXJyb3JDb2RlIiwiVFJBQ0tJTkdfRVZFTlRfUE9JTlQiLCJNYXAiLCJ2YXN0IiwiY29uc3RydWN0b3IiLCJpc1dyYXBwZXIiLCJ2RWxlIiwiYXN5bmMiLCJ2YXN0QWRUYWdVUklFbGUiLCJyZXMiLCJmZXRjaCIsInRleHQiLCJzb3VyY2VWYXN0IiwidmFzdE9iamVjdCIsImVycm9yVXJscyIsImltcHJlc3Npb25VcmxzIiwiYWRUaXRsZSIsImFkRGVzYyIsImNyZWF0aXZlcyIsImkiLCJ2YXN0RWxlIiwidGhpcyIsInBhcnNlVmFzdFhNTCIsInVwZGF0ZUlubGluZVZhc3RPYmplY3QiLCJ1cGRhdGVXcmFwcGVyVmFzdE9iamVjdCIsIm5leHRWYXN0IiwiZSIsInhtbERvYyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInBhcnNlckVycm9yIiwicm9vdEVycm9yRWxlIiwid3JhcHBlckVsZSIsIk5vVkFTVFJlc3BvbnNlQWZ0ZXJXcmFwcGVyIiwiZXJyb3JFbGUiLCJpbXBFbGUiLCJYTUxQYXJzZUVycm9yIiwiaW1wcmVzc2lvblVybCIsImxpbmVhckVsZSIsImNvbmNhdCIsImR1cmF0aW9uRWxlIiwidHJhY2tpbmdzRWxlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0cmFja2luZ01hcCIsImNyZWF0ZVRyYWNraW5nT2JqZWN0IiwiaWNvbnMiLCJ2aWRlb0NsaWNrc0VsZSIsImNsaWNrVGhyb3VnaCIsImNsaWNrVHJhY2tpbmciLCJjbGlja1Rocm91Z2hFbGUiLCJjb250ZW50IiwiY2xpY2tUcmFja2luZ0VsZXMiLCJjbGlja1RyYWNraW5nRWxlIiwibGluZWFyIiwibWVkaWFGaWxlcyIsInRyYWNraW5nRXZlbnRzIiwiY2xpY2tUcmFja2luZ3MiLCJpbmxpbmVFbGUiLCJhZFRpdGxlRWxlIiwiYWREZXNjRWxlIiwibWVkaWFGaWxlRWxlcyIsIm1lZGlhRmlsZVVybCIsInRyYWNraW5nRWxlcyIsImZvckVhY2giLCJ0cmFja2luZyIsImV2ZW50Iiwib2Zmc2V0U2Vjb25kIiwic2V0IiwiZXZlbnRfcG9pbnQiLCJnZXQiLCJ1bmRlZmluZWQiLCJ2YXN0RXhlY3V0b3IiLCJpZnJhbWUiLCJib3JkZXIiLCJnZXRFbGVtZW50QnlJZCIsImFwcGVuZENoaWxkIiwiaURvYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsImRvY3VtZW50RWxlbWVudCIsIm92ZXJmbG93IiwidmFzdFZpZGVvRGl2IiwidmlkZW9QYXJlbnQiLCJyZXBsYWNlTWFwIiwidG9JU09TdHJpbmciLCJpbnZpZXdSYXRpb01nciIsInJhdGlvIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZW50cnkiLCJNYXRoIiwiZmxvb3IiLCJpbnRlcnNlY3Rpb25SYXRpbyIsInJvb3RNYXJnaW4iLCJ0aHJlc2hvbGQiLCJvYnNlcnZlIiwidG9GaXhlZCIsImdldEludmlld1JhdGlvIiwidGFyZ2V0IiwidmFsdWUiLCJrZXkiLCJhZERlc2NEaXYiLCJ2aWRlbyIsImNyZWF0aXZlIiwibWVkaWFGaWxlIiwic291cmNlIiwibWVkaWFUeXBlIiwidGVzdCIsInR5cGUiLCJjYWxsYmFjayIsImlzSW50ZXJzZWN0aW5nIiwicGxheSIsInBhdXNlIiwibXV0ZWQiLCJhdXRvcGxheSIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcm9ncmVzc2JhciIsImJhckFuaW1hdGlvbkxvb3AiLCJwcm9ncmVzc1BvaW50IiwiY3VycmVudFRpbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvbmNlIiwic2V0SW1wcmVzc2lvblVybCIsInNldFZpZGVvQ2xpY2tUaHJvdWdoVXJsIiwic2V0VmlkZW9DbGlja1RyYWNraW5nVXJscyIsInBvaW50IiwidGltZUJlYWNvbkV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRyYWNraW5nVXJscyIsImljb25QYXJlbnQiLCJpY29uT2JqIiwicG9zaXRpb24iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJ0aW1lSWNvbkV2ZW50IiwiY29udGFpbnMiLCJyZW1vdmVDaGlsZCIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=