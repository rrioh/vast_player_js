(()=>{"use strict";function e(e,t,r){if(!t)return;new Date;let n=document.createElement("img");t=r(t,null),n.src=t,n.style.display="none",e.prepend(n),console.log("[DEBUG] beacon sent: "+t)}function t(t,r,n){if(t)for(let o of t)o=o.replace(/\[ERRORCODE\]/,r.toString()),e(document.body,o,n)}function r(e){let t=e.match(/(\d{2}):(\d{2}):(\d{2})\.?(\d{3})?/);if(!t||t.length<4||isNaN(parseInt(t[1]))||isNaN(parseInt(t[2]))||isNaN(parseInt(t[3])))throw new Error("convertdurationToSecond error: "+e);return 5!=t.length||isNaN(parseInt(t[4]))?60*parseInt(t[1])*60+60*parseInt(t[2])+parseFloat(t[3]):60*parseInt(t[1])*60+60*parseInt(t[2])+parseFloat(t[3]+"."+t[4])}function n(e){let t=[];for(let n of e){let e=n,o=parseInt(e.getAttribute("width")||"10")||10,i=parseInt(e.getAttribute("height")||"10")||10,a="0px",s=e.getAttribute("xPosition");s&&(a="left"===s||"right"===s?s:s+"px");let c="0px",l=e.getAttribute("yPosition");l&&(c="top"===l||"bottom"===l?l:l+"px");let p=e.getAttribute("offset"),d=0;p&&(d=r(p));let u=e.getAttribute("duration"),f=null;u&&(f=r(u)+d);const h=e.querySelector(":scope>StaticResource");if(!h||!h.textContent)continue;const m=e.querySelector(":scope>IconClicks>IconClickThrough"),E=e.querySelector(":scope>IconClicks>IconClickTracking");t.push({width:o,height:i,xPosition:a,yPosition:c,start:d,end:f,imgUrl:h.textContent,clickThroughUrl:m?.textContent??null,clickTrackingUrl:E?.textContent??null})}return t}var o;!function(e){e[e.XMLParseError=100]="XMLParseError",e[e.VASTSchemaValidationError=101]="VASTSchemaValidationError",e[e.VASTVersionOfResponseNotSupported=102]="VASTVersionOfResponseNotSupported",e[e.NonPlayableAdType=200]="NonPlayableAdType",e[e.MediaPlayerExpectingDifferentLinearity=201]="MediaPlayerExpectingDifferentLinearity",e[e.MediaPlayerExpectingDifferentDuration=202]="MediaPlayerExpectingDifferentDuration",e[e.MediaPlayerExpectingDifferentSize=203]="MediaPlayerExpectingDifferentSize",e[e.AdCategoryNotProvided=204]="AdCategoryNotProvided",e[e.InlineCategoryViolatesWrapperBlockedAdCategories=205]="InlineCategoryViolatesWrapperBlockedAdCategories",e[e.AdNotServed=206]="AdNotServed",e[e.GeneralWrapperError=300]="GeneralWrapperError",e[e.VASTURIUnavailableOrTimeout=301]="VASTURIUnavailableOrTimeout",e[e.WrapperLimitReached=302]="WrapperLimitReached",e[e.NoVASTResponseAfterWrapper=303]="NoVASTResponseAfterWrapper",e[e.AdUnitNotDisplayed=304]="AdUnitNotDisplayed",e[e.GeneralLinearError=400]="GeneralLinearError",e[e.FileNotFound=401]="FileNotFound",e[e.MediaFileURITimeout=402]="MediaFileURITimeout",e[e.SupportedMediaFileNotFound=403]="SupportedMediaFileNotFound",e[e.ProblemDisplayingMediaFile=405]="ProblemDisplayingMediaFile",e[e.MezzanineNotProvided=406]="MezzanineNotProvided",e[e.MezzanineDownloading=407]="MezzanineDownloading",e[e.ConditionalAdRejected=408]="ConditionalAdRejected",e[e.InteractiveUnitNotExecuted=409]="InteractiveUnitNotExecuted",e[e.VerificationUnitNotExecuted=410]="VerificationUnitNotExecuted",e[e.NotRequiredSpecificationOfMezzanine=411]="NotRequiredSpecificationOfMezzanine",e[e.GeneralNonLinearAdsError=500]="GeneralNonLinearAdsError",e[e.NonLinearAdNonDisplayable=501]="NonLinearAdNonDisplayable",e[e.UnableToFetchNonLinearResource=502]="UnableToFetchNonLinearResource",e[e.SupportedNonLinearResourceNotFound=503]="SupportedNonLinearResourceNotFound",e[e.GeneralCompanionAdsError=600]="GeneralCompanionAdsError",e[e.CompanionNonDisplayableByDimemsionError=601]="CompanionNonDisplayableByDimemsionError",e[e.RequiredCompanionNonDisplayable=602]="RequiredCompanionNonDisplayable",e[e.UnableToFetchNonCompanionResource=603]="UnableToFetchNonCompanionResource",e[e.SupportedCompanionResourceNotFound=604]="SupportedCompanionResourceNotFound",e[e.UndefinedError=900]="UndefinedError",e[e.GeneralVPAIDError=901]="GeneralVPAIDError",e[e.GeneralInteractiveCreativeFileError=902]="GeneralInteractiveCreativeFileError"}(o||(o={}));const i=new Map([["start",0],["firstQuartile",1/4],["midpoint",.5],["thirdQuartile",3/4],["complete",1]]),a=new class{constructor(){}isWrapper(e){return!!e.querySelector(":scope>Ad>Wrapper")}async nextVast(e){const t=e.querySelector(":scope>Ad>Wrapper>VASTAdTagURI");if(!t||!t.textContent)throw new Error("next vast url error");let r=t.textContent;const n=await fetch(r);return await n.text()}async parseVast(e,t){try{let r={errorUrls:[],impressionUrls:[],adTitle:"",adDesc:"",creatives:[]};for(let n=1;n<=5;n++){let o=this.parseVastXML(e);if(!this.isWrapper(o)){r=this.updateInlineVastObject(r,o,t);break}if(5==n)throw new Error("too many wrapper");r=this.updateWrapperVastObject(r,o,t),e=await this.nextVast(o)}return r}catch(e){return console.log("[ERROR] cannot create VASTObject: "+e),null}}parseVastXML(e){let t=(new DOMParser).parseFromString(e,"application/xml"),r=t.querySelector("parsererror");if(r)throw new Error(r.textContent||"parse vast error");let n=t.querySelector("VAST");if(!n)throw new Error("VAST tag not found");return n}updateWrapperVastObject(e,i,a){let s=[];const c=i.querySelector(":scope>Error");c&&c.textContent&&s.push(c.textContent);const l=i.querySelector(":scope>Ad>Wrapper");if(!l)throw t(s,o.NoVASTResponseAfterWrapper,a),new Error("parse Wrapper error");const p=l.querySelector(":scope>Error");p&&p.textContent&&s.push(p.textContent);const d=l.querySelector(":scope>Impression");if(!d||!d.textContent)throw t(s,o.XMLParseError,a),new Error("parse Wrapper Impression error");const u=d.textContent,f=l.querySelector(":scope>Creatives>Creative>Linear");if(!f)return e.errorUrls=e.errorUrls.concat(s),e.impressionUrls.push(u),e;const h=f.querySelector(":scope>Duration");if(!h||!h.textContent)throw t(s,o.XMLParseError,a),new Error("parse Wrapper Linear Duration error");const m=r(h.textContent),E=f.querySelectorAll(":scope>TrackingEvents>Tracking"),g=this.createTrackingObject(E,m),y=n(f.querySelectorAll(":scope>Icons>Icon")),T=f.querySelector(":scope>VideoClicks");let v=null,C=[];if(T){const e=T.querySelector(":scope>ClickThrough");e&&e.textContent&&(v={content:e.textContent});const t=T.querySelectorAll(":scope>ClickTracking");for(let e of t)e.textContent&&C.push({content:e.textContent})}return e.errorUrls=e.errorUrls.concat(s),e.impressionUrls.push(u),e.creatives.push({linear:{duration:m,mediaFiles:[],trackingEvents:g,clickThrough:v,clickTrackings:C,icons:y}}),e}updateInlineVastObject(e,i,a){let s=[];const c=i.querySelector(":scope>Error");c&&c.textContent&&s.push(c.textContent);const l=i.querySelector(":scope>Ad>InLine");if(!l)throw t(s,o.NoVASTResponseAfterWrapper,a),new Error("parse InLine error");const p=l.querySelector(":scope>Error");p&&p.textContent&&s.push(p.textContent);const d=l.querySelector(":scope>Impression");if(!d||!d.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine Impression error");const u=d.textContent,f=l.querySelector(":scope>AdTitle");if(!f||!f.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine AdTitle error");const h=f.textContent;let m=null;const E=l.querySelector(":scope>Description");E&&E.textContent&&(m=E.textContent);const g=l.querySelector(":scope>Creatives>Creative>Linear");if(!g)throw t(s,o.XMLParseError,a),new Error("parse InLine Linear error");const y=g.querySelector(":scope>Duration");if(!y||!y.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine Linear Duration error");const T=r(y.textContent),v=g.querySelectorAll(":scope>TrackingEvents>Tracking"),C=this.createTrackingObject(v,T),A=n(g.querySelectorAll(":scope>Icons>Icon")),x=g.querySelectorAll(":scope>MediaFiles>MediaFile");if(!x)throw t(s,o.XMLParseError,a),new Error("parse MediaFiles error");const I=x[0]?.textContent,S=g.querySelector(":scope>VideoClicks");let w=null,k=[];if(S){const e=S.querySelector(":scope>ClickThrough");if(!e||!e.textContent)throw t(s,o.XMLParseError,a),new Error("parse InLine Linear ClickThrough error");w={content:e.textContent};const r=S.querySelectorAll(":scope>ClickTracking");for(let e of r)e.textContent&&k.push({content:e.textContent})}return e.errorUrls=e.errorUrls.concat(s),e.impressionUrls.push(u),e.adTitle=h,e.adDesc=m,e.creatives.push({linear:{duration:T,mediaFiles:[{content:I}],trackingEvents:C,clickThrough:w,clickTrackings:k,icons:A}}),e}createTrackingObject(e,t){const n=new Map;return e.forEach((function(e){if(!e.textContent)return;const o=e.getAttribute("event");if(o)if("progress"===o){const t=e.getAttribute("offset");if(!t)return;const o=r(t);n.set(o,e.textContent)}else{const r=i.get(o);null!=r?n.set(r*t,e.textContent):n.set(o,e.textContent)}})),n}},s=new class{async startPlayer(t){console.log("setPlayer started...");try{let n=document.createElement("iframe");n.width="300px",n.height="250px",n.style.border="none",document.getElementById("playerbox")?.appendChild(n);let o=n.contentWindow.document;o.open(),o.write('\n<!DOCTYPE html>\n<html>\n    <head>\n    </head>\n    <body style="margin:0;">\n        <div id="vast_video_container">\n            <div id="vast_video" style="width:300px;height:168.75px;"></div>\n            <div id="progress_bar" style="width:50%;height:3px;background-color:gray;"></div>\n            <div id="ad_text" style="margin:0;width:300px;height:78.25px;background-color:#dcdcdc;">\n                <div id="ad_title" style="font-size:15px;font-weight:bold;"></div>\n                <div id="ad_desc" style="font-size:10px;"></div>\n            </div>\n        </div>\n    </body>\n</html>\n'),o.close(),o.documentElement.style.overflow="hidden";let i=o.getElementById("vast_video");const s=function(e){let t=new Map;t.set("[TIMESTAMP]",(()=>(new Date).toISOString()));const r={ratio:0};return new IntersectionObserver((function(e){e.forEach((function(e){const t=Math.floor(100*e.intersectionRatio)/100;r.ratio=t}))}),{rootMargin:"0px",threshold:[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]}).observe(e),t.set("[INVIEW_RATIO]",function(e){return()=>e.ratio.toFixed(2)}(r)),(e,r)=>(r&&t.set("[ERRORCODE]",r.toString()),t.forEach(((t,r)=>{e=e.replace(r,"function"==typeof t?t():t)})),e)}(i),c=await a.parseVast('\n<VAST version="4.2">\n  <Error>\n    <![CDATA[http://test.example/error?code=[ERRORCODE]&clientTime=[TIMESTAMP]]]>\n  </Error>\n  <Ad id="1b330e59-3a62-4000-b9fb-ac9726e98c52" sequence="1">\n    <Wrapper>\n      <Impression><![CDATA[https://wrapper.test.example/impression?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Impression>\n      <VASTAdTagURI>\n        <![CDATA[http://localhost:8080/sample/inline.html]]>\n      </VASTAdTagURI>\n      <Creatives>\n        <Creative adId="7245" sequence="1">\n          <Linear>\n            <Duration>00:00:14.014</Duration>\n            <TrackingEvents>\n              <Tracking event="start"><![CDATA[https://wrapper.test.example/start?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Tracking>\n              <Tracking event="firstQuartile"><![CDATA[https://wrapper.test.example/firstQuartile?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Tracking>\n              <Tracking event="complete"><![CDATA[https://wrapper.test.example/complete?clientTime=[TIMESTAMP]&inview_ratio=[INVIEW_RATIO]]]></Tracking>\n            </TrackingEvents>\n          </Linear>\n        </Creative>\n      </Creatives>\n    </Wrapper>\n  </Ad>\n</VAST>\n',s);if(!c)return;o.getElementById("ad_title").textContent=c.adTitle;let l=o.getElementById("ad_desc");c.adDesc&&(l.textContent=c.adDesc);let p=document.createElement("video");for(let u of c.creatives)for(let f of u.linear.mediaFiles){let h=document.createElement("source");h.src=f.content;let m=(r=f.content,/\.mp4$/.test(r)?"video/mp4":/\.mov$/.test(r)?"video/quicktime":/\.mpg$/.test(r)||/\.mpeg$/.test(r)?"video/mpeg":/\.webm$/.test(r)?"video/webm":"");m&&(h.type=m),p.appendChild(h)}function d(e){e.forEach((function(e){e.isIntersecting?p.play():p.pause()}))}p.style.width="100%",p.style.height="100%",p.muted=!0,p.autoplay=!0,p.addEventListener("loadedmetadata",(function(e){let t=o.getElementById("progress_bar"),r=function(){let e=p.currentTime/p.duration*100;t.style.width=e+"%",requestAnimationFrame(r)};requestAnimationFrame(r)})),function(t,r,n){!function(t,r,n){for(let o of r)t.addEventListener("canplay",(function(r){e(t,o,n)}),{once:!0})}(t,r.impressionUrls,n),function(e,t){for(let r of t.creatives)if(r.linear.clickThrough){const t=r.linear.clickThrough.content;e.addEventListener("click",(function(e){open(t,"_blank")}))}}(t,r),function(t,r,n){for(let o of r.creatives)for(let r of o.linear.clickTrackings){const o=r.content;t.addEventListener("click",(function(r){e(t,o,n)}))}}(t,r,n),function(t,r,n){t.addEventListener("loadedmetadata",(function(o){for(let o of r.creatives)for(let[r,i]of o.linear.trackingEvents)"loaded"==r?t.addEventListener("canplay",(function(r){e(t,i,n)}),{once:!0}):"pause"===r?t.addEventListener("pause",(function(r){t.currentTime<t.duration&&e(t,i,n)})):"number"==typeof r&&t.addEventListener("timeupdate",(function o(a){t.currentTime>=r&&(e(t,i,n),t.removeEventListener("timeupdate",o))}))}))}(t,r,n)}(p,c,s),function(t,r,n,o){for(let i of n.creatives)for(let n of i.linear.icons){let i=document.createElement("img");i.src=n.imgUrl,i.width=n.width,i.height=n.height,i.style.position="fixed","left"===n.xPosition?i.style.left="0px":"right"===n.xPosition?i.style.right="0px":i.style.left=n.xPosition,"top"===n.yPosition?i.style.top="0px":"bottom"===n.yPosition?i.style.bottom="0px":i.style.top=n.yPosition,i.addEventListener("click",(function(r){n.clickTrackingUrl&&e(t,n.clickTrackingUrl,o),n.clickThroughUrl&&open(n.clickThroughUrl,"_blank")})),t.addEventListener("timeupdate",(function e(o){!r.contains(i)&&t.currentTime>=n.start&&r.appendChild(i),n.end&&r.contains(i)&&t.currentTime>=n.end&&(r.removeChild(i),t.removeEventListener("timeupdate",e))})),n.end||t.addEventListener("ended",(function(e){r.contains(i)&&r.removeChild(i)}))}}(p,i,c,s),i.appendChild(p),new IntersectionObserver(d,{rootMargin:"0px",threshold:.5}).observe(p)}catch(E){console.log("cannot start Player: "+E)}var r}};window.vastExecutor=window.vastExecutor||s})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,