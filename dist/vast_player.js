(()=>{"use strict";function e(e,t,r){if(!t)return;new Date;let n=document.createElement("img");t=r(t,null),n.src=t,n.style.display="none",e.prepend(n),console.log("[DEBUG] beacon sent: "+t)}function t(e,t){if(e)for(let r of e){let e=document.createElement("img");e.src=r.replace(/\[ERRORCODE\]/,t.toString()),e.style.display="none",document.body.prepend(e),console.log("[DEBUG] error beacon sent: "+r)}}var r;function n(e){let t=e.match(/(\d{2}):(\d{2}):(\d{2})/);if(!t||t.length<4||NaN===parseInt(t[1])||NaN===parseInt(t[2])||NaN===parseInt(t[3]))throw new Error("convertdurationToSecond error: "+e);return 60*parseInt(t[1])*60+60*parseInt(t[2])+parseFloat(t[3])}!function(e){e[e.XMLParseError=100]="XMLParseError",e[e.VASTSchemaValidationError=101]="VASTSchemaValidationError",e[e.VASTVersionOfResponseNotSupported=102]="VASTVersionOfResponseNotSupported",e[e.NonPlayableAdType=200]="NonPlayableAdType",e[e.MediaPlayerExpectingDifferentLinearity=201]="MediaPlayerExpectingDifferentLinearity",e[e.MediaPlayerExpectingDifferentDuration=202]="MediaPlayerExpectingDifferentDuration",e[e.MediaPlayerExpectingDifferentSize=203]="MediaPlayerExpectingDifferentSize",e[e.AdCategoryNotProvided=204]="AdCategoryNotProvided",e[e.InlineCategoryViolatesWrapperBlockedAdCategories=205]="InlineCategoryViolatesWrapperBlockedAdCategories",e[e.AdNotServed=206]="AdNotServed",e[e.GeneralWrapperError=300]="GeneralWrapperError",e[e.VASTURIUnavailableOrTimeout=301]="VASTURIUnavailableOrTimeout",e[e.WrapperLimitReached=302]="WrapperLimitReached",e[e.NoVASTResponseAfterWrapper=303]="NoVASTResponseAfterWrapper",e[e.AdUnitNotDisplayed=304]="AdUnitNotDisplayed",e[e.GeneralLinearError=400]="GeneralLinearError",e[e.FileNotFound=401]="FileNotFound",e[e.MediaFileURITimeout=402]="MediaFileURITimeout",e[e.SupportedMediaFileNotFound=403]="SupportedMediaFileNotFound",e[e.ProblemDisplayingMediaFile=405]="ProblemDisplayingMediaFile",e[e.MezzanineNotProvided=406]="MezzanineNotProvided",e[e.MezzanineDownloading=407]="MezzanineDownloading",e[e.ConditionalAdRejected=408]="ConditionalAdRejected",e[e.InteractiveUnitNotExecuted=409]="InteractiveUnitNotExecuted",e[e.VerificationUnitNotExecuted=410]="VerificationUnitNotExecuted",e[e.NotRequiredSpecificationOfMezzanine=411]="NotRequiredSpecificationOfMezzanine",e[e.GeneralNonLinearAdsError=500]="GeneralNonLinearAdsError",e[e.NonLinearAdNonDisplayable=501]="NonLinearAdNonDisplayable",e[e.UnableToFetchNonLinearResource=502]="UnableToFetchNonLinearResource",e[e.SupportedNonLinearResourceNotFound=503]="SupportedNonLinearResourceNotFound",e[e.GeneralCompanionAdsError=600]="GeneralCompanionAdsError",e[e.CompanionNonDisplayableByDimemsionError=601]="CompanionNonDisplayableByDimemsionError",e[e.RequiredCompanionNonDisplayable=602]="RequiredCompanionNonDisplayable",e[e.UnableToFetchNonCompanionResource=603]="UnableToFetchNonCompanionResource",e[e.SupportedCompanionResourceNotFound=604]="SupportedCompanionResourceNotFound",e[e.UndefinedError=900]="UndefinedError",e[e.GeneralVPAIDError=901]="GeneralVPAIDError",e[e.GeneralInteractiveCreativeFileError=902]="GeneralInteractiveCreativeFileError"}(r||(r={}));const o=new Map([["start",0],["firstQuartile",1/4],["midpoint",.5],["thirdQuartile",3/4],["complete",1]]),i=new class{errorUrls;constructor(){this.errorUrls=[]}isWrapper(e){return!!e.querySelector(":scope>Ad>Wrapper")}async nextVast(e){const t=e.querySelector(":scope>Ad>Wrapper>VASTAdTagURI");if(!t||!t.textContent)throw new Error("next vast url error");let r=t.textContent;const n=await fetch(r);return await n.text()}async parseVast(e){try{let t=this.parseVastXML(e);for(let r=1;r<=5&&this.isWrapper(t);r++){if(5==r)throw new Error("too many wrapper");e=await this.nextVast(t),t=this.parseVastXML(e)}return this.createVastObject(t)}catch(e){return console.log("[ERROR] cannot create VASTObject: "+e),null}}parseVastXML(e){let t=(new DOMParser).parseFromString(e,"application/xml"),r=t.querySelector("parsererror");if(r)throw new Error(r.textContent||"parse vast error");let n=t.querySelector("VAST");if(!n)throw new Error("VAST tag not found");return n}createVastObject(e){const o=e.querySelector(":scope>Error");o&&o.textContent&&this.errorUrls.push(o.textContent);const i=e.querySelector(":scope>Ad>InLine");if(!i)throw t(this.errorUrls,r.NoVASTResponseAfterWrapper),new Error("parse InLine error");const a=i.querySelector(":scope>Error");a&&a.textContent&&this.errorUrls.push(a.textContent);const s=i.querySelector(":scope>Impression");if(!s||!s.textContent)throw t(this.errorUrls,r.XMLParseError),new Error("parse InLine Impression error");const l=s.textContent,c=i.querySelector(":scope>AdTitle");if(!c||!c.textContent)throw t(this.errorUrls,r.XMLParseError),new Error("parse InLine AdTitle error");const d=c.textContent;let p=null;const u=i.querySelector(":scope>Description");u&&u.textContent&&(p=u.textContent);const h=i.querySelector(":scope>Creatives>Creative>Linear");if(!h)throw t(this.errorUrls,r.XMLParseError),new Error("parse InLine Linear error");const f=h.querySelector(":scope>Duration");if(!f||!f.textContent)throw t(this.errorUrls,r.XMLParseError),new Error("parse InLine Linear Duration error");const E=n(f.textContent),y=h.querySelectorAll(":scope>TrackingEvents>Tracking"),g=this.createTrackingObject(y,E),m=h.querySelectorAll(":scope>Icons>Icon"),x=this.createIconObject(m),A=h.querySelectorAll(":scope>MediaFiles>MediaFile");if(!A)throw t(this.errorUrls,r.XMLParseError),new Error("parse MediaFiles error");const C=A[0]?.textContent,T=h.querySelector(":scope>VideoClicks");let v=null,S=[];if(T){const e=T.querySelector(":scope>ClickThrough");if(!e||!e.textContent)throw t(this.errorUrls,r.XMLParseError),new Error("parse InLine Linear ClickThrough error");v=e.textContent;const n=T.querySelectorAll(":scope>ClickTracking");for(let e of n)e.textContent&&S.push(e.textContent)}return{errorUrls:this.errorUrls,impressionUrls:[l],adTitle:d,adDesc:p,trackings:g,icons:x,mediaFileUrl:C,clickThroughUrl:v,clickTrackingUrls:S}}createTrackingObject(e,t){const r=new Map;return e.forEach((function(e){if(!e.textContent)return;const i=e.getAttribute("event");if(i)if("progress"===i){const t=e.getAttribute("offset");if(!t)return;const o=n(t);r.set(o,e.textContent)}else{const n=o.get(i);null!=n?r.set(n*t,e.textContent):r.set(i,e.textContent)}})),r}createIconObject(e){let t=[];for(let r of e){let e=r,o=parseInt(e.getAttribute("width")||"10")||10,i=parseInt(e.getAttribute("height")||"10")||10,a="0px",s=e.getAttribute("xPosition");s&&(a="left"===s||"right"===s?s:s+"px");let l="0px",c=e.getAttribute("yPosition");c&&(l="top"===c||"bottom"===c?c:c+"px");let d=e.getAttribute("offset"),p=0;d&&(p=n(d));let u=e.getAttribute("duration"),h=null;u&&(h=n(u)+p);const f=e.querySelector(":scope>StaticResource");if(!f||!f.textContent)continue;const E=e.querySelector(":scope>IconClicks>IconClickThrough"),y=e.querySelector(":scope>IconClicks>IconClickTracking");t.push({width:o,height:i,xPosition:a,yPosition:l,start:p,end:h,imgUrl:f.textContent,clickThroughUrl:E?.textContent??null,clickTrackingUrl:y?.textContent??null})}return t}},a=new class{async startPlayer(t){console.log("setPlayer started...");const r=await i.parseVast('\n<VAST version="4.2">\n  <Error>\n    <![CDATA[http://test.example/error?code=[ERRORCODE]&clientTime=[TIMESTAMP]]]>\n  </Error>\n  <Ad id="1b330e59-3a62-4000-b9fb-ac9726e98c52" sequence="1">\n    <Wrapper>\n      <VASTAdTagURI>\n        <![CDATA[http://localhost:8080/sample/inline.html]]>\n      </VASTAdTagURI>\n    </Wrapper>\n  </Ad>\n</VAST>\n');if(!r)return;let n=document.createElement("iframe");n.width="300px",n.height="250px",n.style.border="none",document.getElementById("playerbox")?.appendChild(n);let o=n.contentWindow.document;o.open(),o.write('\n<!DOCTYPE html>\n<html>\n    <head>\n    </head>\n    <body style="margin:0;">\n        <div id="vast_video_container">\n            <div id="vast_video" style="width:300px;height:168.75px;"></div>\n            <div id="progress_bar" style="width:50%;height:3px;background-color:gray;"></div>\n            <div id="ad_text" style="margin:0;width:300px;height:78.25px;background-color:#dcdcdc;">\n                <div id="ad_title" style="font-size:15px;font-weight:bold;"></div>\n                <div id="ad_desc" style="font-size:10px;"></div>\n            </div>\n        </div>\n    </body>\n</html>\n'),o.close(),o.documentElement.style.overflow="hidden",o.getElementById("ad_title").textContent=r.adTitle;let a=o.getElementById("ad_desc");r.adDesc&&(a.textContent=r.adDesc);let s=o.getElementById("vast_video"),l=document.createElement("video");l.src=r.mediaFileUrl,l.style.width="100%",l.style.height="100%",l.muted=!0,l.autoplay=!0,l.addEventListener("loadedmetadata",(function(e){let t=o.getElementById("progress_bar"),r=function(){let e=l.currentTime/l.duration*100;t.style.width=e+"%",requestAnimationFrame(r)};requestAnimationFrame(r)}));const c=function(e){let t=new Map;t.set("[TIMESTAMP]",(()=>(new Date).toISOString()));const r={ratio:0};return new IntersectionObserver((function(e){e.forEach((function(e){const t=Math.floor(100*e.intersectionRatio)/100;r.ratio=t}))}),{rootMargin:"0px",threshold:[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]}).observe(e),t.set("[INVIEW_RATIO]",function(e){return()=>e.ratio.toFixed(2)}(r)),(e,r)=>(console.log("REPLACE MAP:"),console.log(t),r&&t.set("[ERRORCODE]",r.toString()),t.forEach(((t,r)=>{console.log("REPLACER KEY: "+r),console.log("REPLACER VALUE: "),console.log(t),e=e.replace(r,"function"==typeof t?t():t)})),e)}(s);(function(t,r,n){!function(t,r,n){for(let o of r)t.addEventListener("canplay",(function(r){e(t,o,n)}),{once:!0})}(t,r.impressionUrls,n),function(e,t){t&&e.addEventListener("click",(function(e){open(t,"_blank")}))}(t,r.clickThroughUrl),function(t,r,n){for(let o of r)t.addEventListener("click",(function(r){e(t,o,n)}))}(t,r.clickTrackingUrls,n),function(t,r,n){t.addEventListener("loadedmetadata",(function(o){for(let[o,i]of r.trackings)"loaded"==o?t.addEventListener("canplay",(function(r){e(t,i,n)}),{once:!0}):"pause"===o?t.addEventListener("pause",(function(r){e(t,i,n)})):"number"==typeof o&&t.addEventListener("timeupdate",(function r(a){t.currentTime>=o&&(e(t,i,n),t.removeEventListener("timeupdate",r))}))}))}(t,r,n)})(l,r,c),function(t,r,n,o){for(let i of n.icons){let n=document.createElement("img");n.src=i.imgUrl,n.width=i.width,n.height=i.height,n.style.position="fixed","left"===i.xPosition?n.style.left="0px":"right"===i.xPosition?n.style.right="0px":n.style.left=i.xPosition,"top"===i.yPosition?n.style.top="0px":"bottom"===i.yPosition?n.style.bottom="0px":n.style.top=i.yPosition,n.addEventListener("click",(function(r){i.clickTrackingUrl&&e(t,i.clickTrackingUrl,o),i.clickThroughUrl&&open(i.clickThroughUrl,"_blank")})),t.addEventListener("timeupdate",(function e(o){!r.contains(n)&&t.currentTime>=i.start&&r.appendChild(n),i.end&&r.contains(n)&&t.currentTime>=i.end&&(r.removeChild(n),t.removeEventListener("timeupdate",e))})),i.end||t.addEventListener("ended",(function(e){r.contains(n)&&r.removeChild(n)}))}}(l,s,r,c),new IntersectionObserver((function(e){e.forEach((function(e){e.isIntersecting?l.play():l.pause()}))}),{rootMargin:"0px",threshold:.5}).observe(l),s.appendChild(l)}};window.vastExecutor=window.vastExecutor||a})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,